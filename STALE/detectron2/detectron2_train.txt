writing pycocotools.egg-info/PKG-INFO
writing dependency_links to pycocotools.egg-info/dependency_links.txt
writing requirements to pycocotools.egg-info/requires.txt
writing top-level names to pycocotools.egg-info/top_level.txt
reading manifest file 'pycocotools.egg-info/SOURCES.txt'
writing manifest file 'pycocotools.egg-info/SOURCES.txt'
installing library code to build/bdist.linux-x86_64/egg
running install_lib
running build_py
running build_ext
skipping 'pycocotools/_mask.c' Cython extension (up-to-date)
creating build/bdist.linux-x86_64
creating build/bdist.linux-x86_64/egg
creating build/bdist.linux-x86_64/egg/pycocotools
copying build/lib.linux-x86_64-3.7/pycocotools/_mask.cpython-37m-x86_64-linux-gnu.so -> build/bdist.linux-x86_64/egg/pycocotools
copying build/lib.linux-x86_64-3.7/pycocotools/__init__.py -> build/bdist.linux-x86_64/egg/pycocotools
copying build/lib.linux-x86_64-3.7/pycocotools/coco.py -> build/bdist.linux-x86_64/egg/pycocotools
copying build/lib.linux-x86_64-3.7/pycocotools/mask.py -> build/bdist.linux-x86_64/egg/pycocotools
copying build/lib.linux-x86_64-3.7/pycocotools/cocoeval.py -> build/bdist.linux-x86_64/egg/pycocotools
byte-compiling build/bdist.linux-x86_64/egg/pycocotools/__init__.py to __init__.cpython-37.pyc
byte-compiling build/bdist.linux-x86_64/egg/pycocotools/coco.py to coco.cpython-37.pyc
byte-compiling build/bdist.linux-x86_64/egg/pycocotools/mask.py to mask.cpython-37.pyc
byte-compiling build/bdist.linux-x86_64/egg/pycocotools/cocoeval.py to cocoeval.cpython-37.pyc
creating stub loader for pycocotools/_mask.cpython-37m-x86_64-linux-gnu.so
byte-compiling build/bdist.linux-x86_64/egg/pycocotools/_mask.py to _mask.cpython-37.pyc
creating build/bdist.linux-x86_64/egg/EGG-INFO
copying pycocotools.egg-info/PKG-INFO -> build/bdist.linux-x86_64/egg/EGG-INFO
copying pycocotools.egg-info/SOURCES.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
copying pycocotools.egg-info/dependency_links.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
copying pycocotools.egg-info/requires.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
copying pycocotools.egg-info/top_level.txt -> build/bdist.linux-x86_64/egg/EGG-INFO
writing build/bdist.linux-x86_64/egg/EGG-INFO/native_libs.txt
zip_safe flag not set; analyzing archive contents...
pycocotools.__pycache__._mask.cpython-37: module references __file__
creating dist
creating 'dist/pycocotools-2.0-py3.7-linux-x86_64.egg' and adding 'build/bdist.linux-x86_64/egg' to it
removing 'build/bdist.linux-x86_64/egg' (and everything under it)
Processing pycocotools-2.0-py3.7-linux-x86_64.egg
creating /home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/pycocotools-2.0-py3.7-linux-x86_64.egg
Extracting pycocotools-2.0-py3.7-linux-x86_64.egg to /home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages
Removing pycocotools 2.0 from easy-install.pth file
Adding pycocotools 2.0 to easy-install.pth file

Installed /home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/pycocotools-2.0-py3.7-linux-x86_64.egg
Processing dependencies for pycocotools==2.0
Searching for matplotlib==3.5.2
Best match: matplotlib 3.5.2
Adding matplotlib 3.5.2 to easy-install.pth file

Using /home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages
Searching for Cython==0.29.32
Best match: Cython 0.29.32
Adding Cython 0.29.32 to easy-install.pth file
Installing cygdb script to /home/minoru/miniconda3/envs/STALE/bin
Installing cython script to /home/minoru/miniconda3/envs/STALE/bin
Installing cythonize script to /home/minoru/miniconda3/envs/STALE/bin

Using /home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages
Searching for setuptools==59.5.0
Best match: setuptools 59.5.0
Adding setuptools 59.5.0 to easy-install.pth file

Using /home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages
Searching for kiwisolver==1.4.2
Best match: kiwisolver 1.4.2
Adding kiwisolver 1.4.2 to easy-install.pth file

Using /home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages
Searching for numpy==1.21.6
Best match: numpy 1.21.6
Adding numpy 1.21.6 to easy-install.pth file
Installing f2py script to /home/minoru/miniconda3/envs/STALE/bin
Installing f2py3 script to /home/minoru/miniconda3/envs/STALE/bin
Installing f2py3.7 script to /home/minoru/miniconda3/envs/STALE/bin

Using /home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages
Searching for python-dateutil==2.8.2
Best match: python-dateutil 2.8.2
Adding python-dateutil 2.8.2 to easy-install.pth file

Using /home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages
Searching for cycler==0.11.0
Best match: cycler 0.11.0
Adding cycler 0.11.0 to easy-install.pth file

Using /home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages
Searching for pyparsing==3.0.9
Best match: pyparsing 3.0.9
Adding pyparsing 3.0.9 to easy-install.pth file

Using /home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages
Searching for Pillow==9.1.1
Best match: Pillow 9.1.1
Adding Pillow 9.1.1 to easy-install.pth file

Using /home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages
Searching for fonttools==4.33.3
Best match: fonttools 4.33.3
Adding fonttools 4.33.3 to easy-install.pth file
Installing fonttools script to /home/minoru/miniconda3/envs/STALE/bin
Installing pyftmerge script to /home/minoru/miniconda3/envs/STALE/bin
Installing pyftsubset script to /home/minoru/miniconda3/envs/STALE/bin
Installing ttx script to /home/minoru/miniconda3/envs/STALE/bin

Using /home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages
Searching for packaging==20.3
Best match: packaging 20.3
Adding packaging 20.3 to easy-install.pth file

Using /home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages
Searching for typing-extensions==4.2.0
Best match: typing-extensions 4.2.0
Adding typing-extensions 4.2.0 to easy-install.pth file

Using /home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages
Searching for six==1.16.0
Best match: six 1.16.0
Adding six 1.16.0 to easy-install.pth file

Using /home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages
Finished processing dependencies for pycocotools==2.0
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/cocoapi/PythonAPI$ cd ..
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/cocoapi$ ll
合計 52
drwxrwxr-x  8 minoru minoru 4096 12月  1 15:57 ./
drwxrwxrwx 10 minoru minoru 4096 12月  1 15:49 ../
drwxrwxr-x  8 minoru minoru 4096 12月  1 15:49 .git/
-rw-rw-r--  1 minoru minoru  318 12月  1 15:49 .gitignore
-rw-rw-r--  1 minoru minoru  168 12月  1 15:49 .travis.yml
drwxrwxr-x  3 minoru minoru 4096 12月  1 15:49 LuaAPI/
drwxrwxr-x  3 minoru minoru 4096 12月  1 15:49 MatlabAPI/
drwxrwxr-x  6 minoru minoru 4096 12月  1 15:53 PythonAPI/
-rw-rw-r--  1 minoru minoru 1286 12月  1 15:49 README.txt
drwxrwxr-x  2 minoru minoru 4096 12月  1 15:49 common/
-rw-rw-r--  1 minoru minoru 1533 12月  1 15:49 license.txt
drwxrwxr-x  2 minoru minoru 4096 12月  1 15:49 results/
-rw-rw-r--  1 minoru minoru   94 12月  1 15:57 test.sh
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/cocoapi$ bash test.sh
test.sh: 行 1: dataDir: コマンドが見つかりません
test.sh: 行 3: 予期しないトークン `(' 周辺に構文エラーがあります
test.sh: 行 3: `annFile='%s/annotations/instances_%s.json'%(dataDir,dataType)'
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/cocoapi$ python test.py
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/cocoapi$ cd ..
(STALE) minoru@B450M-A:~/PycharmProjects/STALE$ cd detectron2/
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2$ ls
GETTING_STARTED.md  LICENSE       README.md  configs   demo        detectron2.egg-info  docker  projects   setup.py  tools
INSTALL.md          MODEL_ZOO.md  build      datasets  detectron2  dev                  docs    setup.cfg  tests
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2$ cd tools
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2/tools$ ll
合計 84
drwxrwxrwx  4 minoru minoru 4096 11月 30 17:23 ./
drwxrwxrwx 17 minoru minoru 4096 11月 30 15:27 ../
-rw-rw-rw-  1 minoru minoru 1448 11月 30 15:26 README.md
-rw-rw-rw-  1 minoru minoru    0 11月 30 15:26 __init__.py
-rwxrwxrwx  1 minoru minoru 4978 11月 30 15:26 analyze_model.py*
-rwxrwxrwx  1 minoru minoru 6373 11月 30 15:26 benchmark.py*
-rwxrwxrwx  1 minoru minoru 1608 11月 30 15:26 convert-torchvision-to-d2.py*
drwxrwxrwx  2 minoru minoru 4096 11月 30 15:26 deploy/
-rwxrwxrwx  1 minoru minoru 4420 11月 30 15:26 lazyconfig_train_net.py*
-rw-rw-rw-  1 minoru minoru 8748 11月 30 15:26 lightning_train_net.py
drwxrwxrwx  2 minoru minoru 4096 11月 30 17:23 output/
-rwxrwxrwx  1 minoru minoru 7894 11月 30 15:26 plain_train_net.py*
-rwxrwxrwx  1 minoru minoru 5798 11月 30 15:26 train_net.py*
-rwxrwxrwx  1 minoru minoru 3565 11月 30 15:26 visualize_data.py*
-rwxrwxrwx  1 minoru minoru 3189 11月 30 15:26 visualize_json_results.py*
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2/tools$ python train_net.py --config-file ../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml --num-gpus 1 SOLVER.IMS_PER_BATCH 2 SOLVER.BASE_LR 0.0025
Command Line Args: Namespace(config_file='../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:50152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', '2', 'SOLVER.BASE_LR', '0.0025'], resume=False)
[12/01 16:27:57 detectron2]: Rank of current process: 0. World size: 1
[12/01 16:27:57 detectron2]: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.7.15 (default, Nov 24 2022, 21:12:53) [GCC 11.2.0]
numpy                   1.21.6
detectron2              0.6 @/home/minoru/PycharmProjects/STALE/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.3
detectron2 arch flags   7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.11.0+cu113 @/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   NVIDIA GeForce RTX 2060 (arch=7.5)
Driver version          465.19.01
CUDA_HOME               /usr/local/cuda-11.3
Pillow                  9.1.1
torchvision             0.12.0+cu113 @/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/01 16:27:57 detectron2]: Command line arguments: Namespace(config_file='../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:50152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', '2', 'SOLVER.BASE_LR', '0.0025'], resume=False)
[12/01 16:27:57 detectron2]: Contents of args.config_file=../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[12/01 16:27:57 detectron2]: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - coco_2017_val
  TRAIN:
  - coco_2017_train
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
    - - 64
    - - 128
    - - 256
    - - 512
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: true
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 103.53
  - 116.28
  - 123.675
  PIXEL_STD:
  - 1.0
  - 1.0
  - 1.0
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: true
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id001
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: FastRCNNConvFCHead
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    - p6
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: detectron2://ImageNetPretrained/MSRA/R-50.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.0025
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 90000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 60000
  - 80000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/01 16:27:57 detectron2]: Full config saved to ./output/config.yaml
[12/01 16:27:57 d2.utils.env]: Using a generated random seed 57970759
[12/01 16:28:04 d2.engine.defaults]: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=81, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=320, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
Traceback (most recent call last):
  File "train_net.py", line 162, in <module>
    args=(args,),
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/launch.py", line 82, in launch
    main_func(*args)
  File "train_net.py", line 144, in main
    trainer = Trainer(cfg)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/defaults.py", line 378, in __init__
    data_loader = self.build_train_loader(cfg)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/defaults.py", line 547, in build_train_loader
    return build_detection_train_loader(cfg)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/config/config.py", line 207, in wrapped
    explicit_args = _get_args_from_config(from_config, *args, **kwargs)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/config/config.py", line 245, in _get_args_from_config
    ret = from_config_func(*args, **kwargs)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/build.py", line 350, in _train_loader_from_config
    proposal_files=cfg.DATASETS.PROPOSAL_FILES_TRAIN if cfg.MODEL.LOAD_PROPOSALS else None,
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/build.py", line 241, in get_detection_dataset_dicts
    dataset_dicts = [DatasetCatalog.get(dataset_name) for dataset_name in names]
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/build.py", line 241, in <listcomp>
    dataset_dicts = [DatasetCatalog.get(dataset_name) for dataset_name in names]
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/catalog.py", line 58, in get
    return f()
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/datasets/coco.py", line 500, in <lambda>
    DatasetCatalog.register(name, lambda: load_coco_json(json_file, image_root, name))
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/datasets/coco.py", line 69, in load_coco_json
    coco_api = COCO(json_file)
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/pycocotools/coco.py", line 81, in __init__
    with open(annotation_file, 'r') as f:
FileNotFoundError: [Errno 2] No such file or directory: 'datasets/coco/annotations/instances_train2017.json'
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2/tools$ python train_net.py --config-file ../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml --num-gpus 1 SOLVER.IMS_PER_BATCH 2 SOLVER.BASE_LR 0.0025
Command Line Args: Namespace(config_file='../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:50152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', '2', 'SOLVER.BASE_LR', '0.0025'], resume=False)
[12/01 16:31:17 detectron2]: Rank of current process: 0. World size: 1
[12/01 16:31:18 detectron2]: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.7.15 (default, Nov 24 2022, 21:12:53) [GCC 11.2.0]
numpy                   1.21.6
detectron2              0.6 @/home/minoru/PycharmProjects/STALE/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.3
detectron2 arch flags   7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.11.0+cu113 @/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   NVIDIA GeForce RTX 2060 (arch=7.5)
Driver version          465.19.01
CUDA_HOME               /usr/local/cuda-11.3
Pillow                  9.1.1
torchvision             0.12.0+cu113 @/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/01 16:31:18 detectron2]: Command line arguments: Namespace(config_file='../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:50152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', '2', 'SOLVER.BASE_LR', '0.0025'], resume=False)
[12/01 16:31:19 detectron2]: Contents of args.config_file=../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[12/01 16:31:19 detectron2]: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - coco_2017_val
  TRAIN:
  - coco_2017_train
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
    - - 64
    - - 128
    - - 256
    - - 512
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: true
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 103.53
  - 116.28
  - 123.675
  PIXEL_STD:
  - 1.0
  - 1.0
  - 1.0
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: true
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id001
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: FastRCNNConvFCHead
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    - p6
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: detectron2://ImageNetPretrained/MSRA/R-50.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.0025
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 90000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 60000
  - 80000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/01 16:31:19 detectron2]: Full config saved to ./output/config.yaml
[12/01 16:31:19 d2.utils.env]: Using a generated random seed 19180401
[12/01 16:31:25 d2.engine.defaults]: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=81, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=320, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
Traceback (most recent call last):
  File "train_net.py", line 162, in <module>
    args=(args,),
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/launch.py", line 82, in launch
    main_func(*args)
  File "train_net.py", line 144, in main
    trainer = Trainer(cfg)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/defaults.py", line 378, in __init__
    data_loader = self.build_train_loader(cfg)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/defaults.py", line 547, in build_train_loader
    return build_detection_train_loader(cfg)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/config/config.py", line 207, in wrapped
    explicit_args = _get_args_from_config(from_config, *args, **kwargs)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/config/config.py", line 245, in _get_args_from_config
    ret = from_config_func(*args, **kwargs)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/build.py", line 350, in _train_loader_from_config
    proposal_files=cfg.DATASETS.PROPOSAL_FILES_TRAIN if cfg.MODEL.LOAD_PROPOSALS else None,
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/build.py", line 241, in get_detection_dataset_dicts
    dataset_dicts = [DatasetCatalog.get(dataset_name) for dataset_name in names]
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/build.py", line 241, in <listcomp>
    dataset_dicts = [DatasetCatalog.get(dataset_name) for dataset_name in names]
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/catalog.py", line 58, in get
    return f()
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/datasets/coco.py", line 500, in <lambda>
    DatasetCatalog.register(name, lambda: load_coco_json(json_file, image_root, name))
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/datasets/coco.py", line 69, in load_coco_json
    coco_api = COCO(json_file)
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/pycocotools/coco.py", line 81, in __init__
    with open(annotation_file, 'r') as f:
FileNotFoundError: [Errno 2] No such file or directory: 'datasets/coco/annotations/instances_train2017.json'
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2/tools$ cd ../
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2$ python train_net.py --config-file configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml --num-gpus 1 SOLVER.IMS_PER_BATCH 2 SOLVER.BASE_LR 0.0025
python: can't open file 'train_net.py': [Errno 2] No such file or directory
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2$ python tools/train_net.py --config-file configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml --num-gpus 1 SOLVER.IMS_PER_BATCH 2 SOLVER.BASE_LR 0.0025
Command Line Args: Namespace(config_file='configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:50152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', '2', 'SOLVER.BASE_LR', '0.0025'], resume=False)
[12/01 16:33:12 detectron2]: Rank of current process: 0. World size: 1
[12/01 16:33:13 detectron2]: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.7.15 (default, Nov 24 2022, 21:12:53) [GCC 11.2.0]
numpy                   1.21.6
detectron2              0.6 @/home/minoru/PycharmProjects/STALE/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.3
detectron2 arch flags   7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.11.0+cu113 @/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   NVIDIA GeForce RTX 2060 (arch=7.5)
Driver version          465.19.01
CUDA_HOME               /usr/local/cuda-11.3
Pillow                  9.1.1
torchvision             0.12.0+cu113 @/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/01 16:33:13 detectron2]: Command line arguments: Namespace(config_file='configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:50152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', '2', 'SOLVER.BASE_LR', '0.0025'], resume=False)
[12/01 16:33:13 detectron2]: Contents of args.config_file=configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[12/01 16:33:13 detectron2]: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - coco_2017_val
  TRAIN:
  - coco_2017_train
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
    - - 64
    - - 128
    - - 256
    - - 512
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: true
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 103.53
  - 116.28
  - 123.675
  PIXEL_STD:
  - 1.0
  - 1.0
  - 1.0
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: true
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id001
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: FastRCNNConvFCHead
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    - p6
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: detectron2://ImageNetPretrained/MSRA/R-50.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.0025
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 90000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 60000
  - 80000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/01 16:33:13 detectron2]: Full config saved to ./output/config.yaml
[12/01 16:33:13 d2.utils.env]: Using a generated random seed 13299205
[12/01 16:33:15 d2.engine.defaults]: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=81, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=320, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[12/01 16:33:26 d2.data.datasets.coco]: Loading datasets/coco/annotations/instances_train2017.json takes 10.94 seconds.
[12/01 16:33:27 d2.data.datasets.coco]: Loaded 118287 images in COCO format from datasets/coco/annotations/instances_train2017.json
[12/01 16:33:32 d2.data.build]: Removed 1021 images with no usable annotations. 117266 images left.
[12/01 16:33:35 d2.data.build]: Distribution of instances among all 80 categories:
|   category    | #instances   |   category   | #instances   |   category    | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:-------------:|:-------------|
|    person     | 257253       |   bicycle    | 7056         |      car      | 43533        |
|  motorcycle   | 8654         |   airplane   | 5129         |      bus      | 6061         |
|     train     | 4570         |    truck     | 9970         |     boat      | 10576        |
| traffic light | 12842        | fire hydrant | 1865         |   stop sign   | 1983         |
| parking meter | 1283         |    bench     | 9820         |     bird      | 10542        |
|      cat      | 4766         |     dog      | 5500         |     horse     | 6567         |
|     sheep     | 9223         |     cow      | 8014         |   elephant    | 5484         |
|     bear      | 1294         |    zebra     | 5269         |    giraffe    | 5128         |
|   backpack    | 8714         |   umbrella   | 11265        |    handbag    | 12342        |
|      tie      | 6448         |   suitcase   | 6112         |    frisbee    | 2681         |
|     skis      | 6623         |  snowboard   | 2681         |  sports ball  | 6299         |
|     kite      | 8802         | baseball bat | 3273         | baseball gl.. | 3747         |
|  skateboard   | 5536         |  surfboard   | 6095         | tennis racket | 4807         |
|    bottle     | 24070        |  wine glass  | 7839         |      cup      | 20574        |
|     fork      | 5474         |    knife     | 7760         |     spoon     | 6159         |
|     bowl      | 14323        |    banana    | 9195         |     apple     | 5776         |
|   sandwich    | 4356         |    orange    | 6302         |   broccoli    | 7261         |
|    carrot     | 7758         |   hot dog    | 2884         |     pizza     | 5807         |
|     donut     | 7005         |     cake     | 6296         |     chair     | 38073        |
|     couch     | 5779         | potted plant | 8631         |      bed      | 4192         |
| dining table  | 15695        |    toilet    | 4149         |      tv       | 5803         |
|    laptop     | 4960         |    mouse     | 2261         |    remote     | 5700         |
|   keyboard    | 2854         |  cell phone  | 6422         |   microwave   | 1672         |
|     oven      | 3334         |   toaster    | 225          |     sink      | 5609         |
| refrigerator  | 2634         |     book     | 24077        |     clock     | 6320         |
|     vase      | 6577         |   scissors   | 1464         |  teddy bear   | 4729         |
|  hair drier   | 198          |  toothbrush  | 1945         |               |              |
|     total     | 849949       |              |              |               |              |
[12/01 16:33:35 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/01 16:33:35 d2.data.build]: Using training sampler TrainingSampler
[12/01 16:33:35 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/01 16:33:35 d2.data.common]: Serializing 117266 elements to byte tensors and concatenating them all ...
[12/01 16:33:38 d2.data.common]: Serialized dataset takes 451.21 MiB
[12/01 16:33:40 fvcore.common.checkpoint]: [Checkpointer] Loading from detectron2://ImageNetPretrained/MSRA/R-50.pkl ...
[12/01 16:33:41 d2.checkpoint.c2_model_loading]: Renaming Caffe2 weights ......
[12/01 16:33:41 d2.checkpoint.c2_model_loading]: Following weights matched with submodule backbone.bottom_up:
| Names in Model    | Names in Checkpoint      | Shapes                                          |
|:------------------|:-------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*           | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                  | (64, 3, 7, 7)                                   |
WARNING [12/01 16:33:41 fvcore.common.checkpoint]: Some model parameters or buffers are not found in the checkpoint:
backbone.fpn_lateral2.{bias, weight}
backbone.fpn_lateral3.{bias, weight}
backbone.fpn_lateral4.{bias, weight}
backbone.fpn_lateral5.{bias, weight}
backbone.fpn_output2.{bias, weight}
backbone.fpn_output3.{bias, weight}
backbone.fpn_output4.{bias, weight}
backbone.fpn_output5.{bias, weight}
proposal_generator.rpn_head.anchor_deltas.{bias, weight}
proposal_generator.rpn_head.conv.{bias, weight}
proposal_generator.rpn_head.objectness_logits.{bias, weight}
roi_heads.box_head.fc1.{bias, weight}
roi_heads.box_head.fc2.{bias, weight}
roi_heads.box_predictor.bbox_pred.{bias, weight}
roi_heads.box_predictor.cls_score.{bias, weight}
roi_heads.mask_head.deconv.{bias, weight}
roi_heads.mask_head.mask_fcn1.{bias, weight}
roi_heads.mask_head.mask_fcn2.{bias, weight}
roi_heads.mask_head.mask_fcn3.{bias, weight}
roi_heads.mask_head.mask_fcn4.{bias, weight}
roi_heads.mask_head.predictor.{bias, weight}
WARNING [12/01 16:33:41 fvcore.common.checkpoint]: The checkpoint state_dict contains keys that are not used by the model:
  fc1000.{bias, weight}
  stem.conv1.bias
[12/01 16:33:41 d2.engine.train_loop]: Starting training from iteration 0
ERROR [12/01 16:33:41 d2.engine.train_loop]: Exception during training:
Traceback (most recent call last):
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/train_loop.py", line 268, in run_step
    data = next(self._data_loader_iter)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/common.py", line 283, in __iter__
    for d in self.dataset:
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 530, in __next__
    data = self._next_data()
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 1224, in _next_data
    return self._process_data(data)
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 1250, in _process_data
    data.reraise()
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/_utils.py", line 457, in reraise
    raise exception
FileNotFoundError: Caught FileNotFoundError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/_utils/worker.py", line 287, in _worker_loop
    data = fetcher.fetch(index)
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/_utils/fetch.py", line 32, in fetch
    data.append(next(self.dataset_iter))
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/common.py", line 250, in __iter__
    yield self.dataset[idx]
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/common.py", line 94, in __getitem__
    data = self._map_func(self._dataset[cur_idx])
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/utils/serialize.py", line 26, in __call__
    return self._obj(*args, **kwargs)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/dataset_mapper.py", line 154, in __call__
    image = utils.read_image(dataset_dict["file_name"], format=self.image_format)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/detection_utils.py", line 180, in read_image
    with PathManager.open(file_name, "rb") as f:
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/iopath/common/file_io.py", line 1012, in open
    bret = handler._open(path, mode, buffering=buffering, **kwargs)  # type: ignore
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/iopath/common/file_io.py", line 612, in _open
    opener=opener,
FileNotFoundError: [Errno 2] No such file or directory: 'datasets/coco/train2017/000000237994.jpg'

[12/01 16:33:41 d2.engine.hooks]: Total training time: 0:00:00 (0:00:00 on hooks)
[12/01 16:33:41 d2.utils.events]:  iter: 0    lr: N/A  max_mem: 173M
Traceback (most recent call last):
  File "tools/train_net.py", line 162, in <module>
    args=(args,),
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/launch.py", line 82, in launch
    main_func(*args)
  File "tools/train_net.py", line 150, in main
    return trainer.train()
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/defaults.py", line 484, in train
    super().train(self.start_iter, self.max_iter)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/train_loop.py", line 268, in run_step
    data = next(self._data_loader_iter)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/common.py", line 283, in __iter__
    for d in self.dataset:
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 530, in __next__
    data = self._next_data()
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 1224, in _next_data
    return self._process_data(data)
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 1250, in _process_data
    data.reraise()
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/_utils.py", line 457, in reraise
    raise exception
FileNotFoundError: Caught FileNotFoundError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/_utils/worker.py", line 287, in _worker_loop
    data = fetcher.fetch(index)
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/_utils/fetch.py", line 32, in fetch
    data.append(next(self.dataset_iter))
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/common.py", line 250, in __iter__
    yield self.dataset[idx]
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/common.py", line 94, in __getitem__
    data = self._map_func(self._dataset[cur_idx])
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/utils/serialize.py", line 26, in __call__
    return self._obj(*args, **kwargs)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/dataset_mapper.py", line 154, in __call__
    image = utils.read_image(dataset_dict["file_name"], format=self.image_format)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/detection_utils.py", line 180, in read_image
    with PathManager.open(file_name, "rb") as f:
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/iopath/common/file_io.py", line 1012, in open
    bret = handler._open(path, mode, buffering=buffering, **kwargs)  # type: ignore
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/iopath/common/file_io.py", line 612, in _open
    opener=opener,
FileNotFoundError: [Errno 2] No such file or directory: 'datasets/coco/train2017/000000237994.jpg'

(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2$ df
Filesystem     1K-blocks      Used Available Use% Mounted on
udev             8062332         0   8062332   0% /dev
tmpfs            1624092      2112   1621980   1% /run
/dev/sdc1      983378192 317474492 615877164  35% /
tmpfs            8120456      8988   8111468   1% /dev/shm
tmpfs               5120         4      5116   1% /run/lock
tmpfs            8120456         0   8120456   0% /sys/fs/cgroup
/dev/loop0        153600    153600         0 100% /snap/gnome-3-28-1804/67
/dev/loop1         56960     56960         0 100% /snap/core18/2632
/dev/loop3         15104     15104         0 100% /snap/gnome-characters/296
/dev/loop4           128       128         0 100% /snap/bare/5
/dev/loop2        168832    168832         0 100% /snap/gnome-3-28-1804/161
/dev/loop5          1024      1024         0 100% /snap/gnome-logs/61
/dev/loop6         43904     43904         0 100% /snap/gtk-common-themes/1313
/dev/loop7           512       512         0 100% /snap/gnome-characters/781
/dev/loop8         93952     93952         0 100% /snap/gtk-common-themes/1535
/dev/loop10          768       768         0 100% /snap/gnome-logs/115
/dev/loop9         64768     64768         0 100% /snap/core20/1695
/dev/loop11         4224      4224         0 100% /snap/gnome-calculator/406
/dev/loop12        56960     56960         0 100% /snap/core18/2620
/dev/loop13       573696    573696         0 100% /snap/pycharm-community/302
/dev/sda2          97280     35030     62250  37% /boot/efi
/dev/loop14       354688    354688         0 100% /snap/gnome-3-38-2004/119
/dev/loop15         2688      2688         0 100% /snap/gnome-calculator/920
/dev/loop16       573696    573696         0 100% /snap/pycharm-community/307
/dev/loop17        74624     74624         0 100% /snap/core22/310
/dev/loop18       119552    119552         0 100% /snap/core/14399
tmpfs            1624088       116   1623972   1% /run/user/1000
/dev/loop19       309504    309504         0 100% /snap/google-cloud-cli/89
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2$ python tools/train_net.py --config-file configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml --num-gpus 1 SOLVER.IMS_PER_BATCH 2 SOLVER.BASE_LR 0.0025
Command Line Args: Namespace(config_file='configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:50152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', '2', 'SOLVER.BASE_LR', '0.0025'], resume=False)
[12/01 17:11:51 detectron2]: Rank of current process: 0. World size: 1
[12/01 17:11:51 detectron2]: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.7.15 (default, Nov 24 2022, 21:12:53) [GCC 11.2.0]
numpy                   1.21.6
detectron2              0.6 @/home/minoru/PycharmProjects/STALE/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.3
detectron2 arch flags   7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.11.0+cu113 @/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   NVIDIA GeForce RTX 2060 (arch=7.5)
Driver version          465.19.01
CUDA_HOME               /usr/local/cuda-11.3
Pillow                  9.1.1
torchvision             0.12.0+cu113 @/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/01 17:11:51 detectron2]: Command line arguments: Namespace(config_file='configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:50152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', '2', 'SOLVER.BASE_LR', '0.0025'], resume=False)
[12/01 17:11:51 detectron2]: Contents of args.config_file=configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[12/01 17:11:51 detectron2]: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - coco_2017_val
  TRAIN:
  - coco_2017_train
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
    - - 64
    - - 128
    - - 256
    - - 512
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: true
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 103.53
  - 116.28
  - 123.675
  PIXEL_STD:
  - 1.0
  - 1.0
  - 1.0
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: true
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id001
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: FastRCNNConvFCHead
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    - p6
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: detectron2://ImageNetPretrained/MSRA/R-50.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.0025
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 90000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 60000
  - 80000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/01 17:11:51 detectron2]: Full config saved to ./output/config.yaml
[12/01 17:11:51 d2.utils.env]: Using a generated random seed 52028199
[12/01 17:11:57 d2.engine.defaults]: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=81, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=320, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[12/01 17:12:09 d2.data.datasets.coco]: Loading datasets/coco/annotations/instances_train2017.json takes 12.31 seconds.
[12/01 17:12:10 d2.data.datasets.coco]: Loaded 118287 images in COCO format from datasets/coco/annotations/instances_train2017.json
[12/01 17:12:16 d2.data.build]: Removed 1021 images with no usable annotations. 117266 images left.
[12/01 17:12:19 d2.data.build]: Distribution of instances among all 80 categories:
|   category    | #instances   |   category   | #instances   |   category    | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:-------------:|:-------------|
|    person     | 257253       |   bicycle    | 7056         |      car      | 43533        |
|  motorcycle   | 8654         |   airplane   | 5129         |      bus      | 6061         |
|     train     | 4570         |    truck     | 9970         |     boat      | 10576        |
| traffic light | 12842        | fire hydrant | 1865         |   stop sign   | 1983         |
| parking meter | 1283         |    bench     | 9820         |     bird      | 10542        |
|      cat      | 4766         |     dog      | 5500         |     horse     | 6567         |
|     sheep     | 9223         |     cow      | 8014         |   elephant    | 5484         |
|     bear      | 1294         |    zebra     | 5269         |    giraffe    | 5128         |
|   backpack    | 8714         |   umbrella   | 11265        |    handbag    | 12342        |
|      tie      | 6448         |   suitcase   | 6112         |    frisbee    | 2681         |
|     skis      | 6623         |  snowboard   | 2681         |  sports ball  | 6299         |
|     kite      | 8802         | baseball bat | 3273         | baseball gl.. | 3747         |
|  skateboard   | 5536         |  surfboard   | 6095         | tennis racket | 4807         |
|    bottle     | 24070        |  wine glass  | 7839         |      cup      | 20574        |
|     fork      | 5474         |    knife     | 7760         |     spoon     | 6159         |
|     bowl      | 14323        |    banana    | 9195         |     apple     | 5776         |
|   sandwich    | 4356         |    orange    | 6302         |   broccoli    | 7261         |
|    carrot     | 7758         |   hot dog    | 2884         |     pizza     | 5807         |
|     donut     | 7005         |     cake     | 6296         |     chair     | 38073        |
|     couch     | 5779         | potted plant | 8631         |      bed      | 4192         |
| dining table  | 15695        |    toilet    | 4149         |      tv       | 5803         |
|    laptop     | 4960         |    mouse     | 2261         |    remote     | 5700         |
|   keyboard    | 2854         |  cell phone  | 6422         |   microwave   | 1672         |
|     oven      | 3334         |   toaster    | 225          |     sink      | 5609         |
| refrigerator  | 2634         |     book     | 24077        |     clock     | 6320         |
|     vase      | 6577         |   scissors   | 1464         |  teddy bear   | 4729         |
|  hair drier   | 198          |  toothbrush  | 1945         |               |              |
|     total     | 849949       |              |              |               |              |
[12/01 17:12:19 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/01 17:12:19 d2.data.build]: Using training sampler TrainingSampler
[12/01 17:12:19 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/01 17:12:19 d2.data.common]: Serializing 117266 elements to byte tensors and concatenating them all ...
[12/01 17:12:22 d2.data.common]: Serialized dataset takes 451.21 MiB
[12/01 17:12:24 fvcore.common.checkpoint]: [Checkpointer] Loading from detectron2://ImageNetPretrained/MSRA/R-50.pkl ...
[12/01 17:12:25 d2.checkpoint.c2_model_loading]: Renaming Caffe2 weights ......
[12/01 17:12:25 d2.checkpoint.c2_model_loading]: Following weights matched with submodule backbone.bottom_up:
| Names in Model    | Names in Checkpoint      | Shapes                                          |
|:------------------|:-------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*           | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                  | (64, 3, 7, 7)                                   |
WARNING [12/01 17:12:25 fvcore.common.checkpoint]: Some model parameters or buffers are not found in the checkpoint:
backbone.fpn_lateral2.{bias, weight}
backbone.fpn_lateral3.{bias, weight}
backbone.fpn_lateral4.{bias, weight}
backbone.fpn_lateral5.{bias, weight}
backbone.fpn_output2.{bias, weight}
backbone.fpn_output3.{bias, weight}
backbone.fpn_output4.{bias, weight}
backbone.fpn_output5.{bias, weight}
proposal_generator.rpn_head.anchor_deltas.{bias, weight}
proposal_generator.rpn_head.conv.{bias, weight}
proposal_generator.rpn_head.objectness_logits.{bias, weight}
roi_heads.box_head.fc1.{bias, weight}
roi_heads.box_head.fc2.{bias, weight}
roi_heads.box_predictor.bbox_pred.{bias, weight}
roi_heads.box_predictor.cls_score.{bias, weight}
roi_heads.mask_head.deconv.{bias, weight}
roi_heads.mask_head.mask_fcn1.{bias, weight}
roi_heads.mask_head.mask_fcn2.{bias, weight}
roi_heads.mask_head.mask_fcn3.{bias, weight}
roi_heads.mask_head.mask_fcn4.{bias, weight}
roi_heads.mask_head.predictor.{bias, weight}
WARNING [12/01 17:12:25 fvcore.common.checkpoint]: The checkpoint state_dict contains keys that are not used by the model:
  fc1000.{bias, weight}
  stem.conv1.bias
[12/01 17:12:25 d2.engine.train_loop]: Starting training from iteration 0
ERROR [12/01 17:12:25 d2.engine.train_loop]: Exception during training:
Traceback (most recent call last):
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/train_loop.py", line 268, in run_step
    data = next(self._data_loader_iter)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/common.py", line 283, in __iter__
    for d in self.dataset:
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 530, in __next__
    data = self._next_data()
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 1224, in _next_data
    return self._process_data(data)
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 1250, in _process_data
    data.reraise()
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/_utils.py", line 457, in reraise
    raise exception
FileNotFoundError: Caught FileNotFoundError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/_utils/worker.py", line 287, in _worker_loop
    data = fetcher.fetch(index)
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/_utils/fetch.py", line 32, in fetch
    data.append(next(self.dataset_iter))
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/common.py", line 250, in __iter__
    yield self.dataset[idx]
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/common.py", line 94, in __getitem__
    data = self._map_func(self._dataset[cur_idx])
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/utils/serialize.py", line 26, in __call__
    return self._obj(*args, **kwargs)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/dataset_mapper.py", line 154, in __call__
    image = utils.read_image(dataset_dict["file_name"], format=self.image_format)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/detection_utils.py", line 180, in read_image
    with PathManager.open(file_name, "rb") as f:
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/iopath/common/file_io.py", line 1012, in open
    bret = handler._open(path, mode, buffering=buffering, **kwargs)  # type: ignore
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/iopath/common/file_io.py", line 612, in _open
    opener=opener,
FileNotFoundError: [Errno 2] No such file or directory: 'datasets/coco/train2017/000000496106.jpg'

[12/01 17:12:25 d2.engine.hooks]: Total training time: 0:00:00 (0:00:00 on hooks)
[12/01 17:12:25 d2.utils.events]:  iter: 0    lr: N/A  max_mem: 173M
Traceback (most recent call last):
  File "tools/train_net.py", line 162, in <module>
    args=(args,),
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/launch.py", line 82, in launch
    main_func(*args)
  File "tools/train_net.py", line 150, in main
    return trainer.train()
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/defaults.py", line 484, in train
    super().train(self.start_iter, self.max_iter)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/train_loop.py", line 268, in run_step
    data = next(self._data_loader_iter)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/common.py", line 283, in __iter__
    for d in self.dataset:
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 530, in __next__
    data = self._next_data()
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 1224, in _next_data
    return self._process_data(data)
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 1250, in _process_data
    data.reraise()
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/_utils.py", line 457, in reraise
    raise exception
FileNotFoundError: Caught FileNotFoundError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/_utils/worker.py", line 287, in _worker_loop
    data = fetcher.fetch(index)
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/utils/data/_utils/fetch.py", line 32, in fetch
    data.append(next(self.dataset_iter))
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/common.py", line 250, in __iter__
    yield self.dataset[idx]
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/common.py", line 94, in __getitem__
    data = self._map_func(self._dataset[cur_idx])
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/utils/serialize.py", line 26, in __call__
    return self._obj(*args, **kwargs)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/dataset_mapper.py", line 154, in __call__
    image = utils.read_image(dataset_dict["file_name"], format=self.image_format)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/data/detection_utils.py", line 180, in read_image
    with PathManager.open(file_name, "rb") as f:
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/iopath/common/file_io.py", line 1012, in open
    bret = handler._open(path, mode, buffering=buffering, **kwargs)  # type: ignore
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/iopath/common/file_io.py", line 612, in _open
    opener=opener,
FileNotFoundError: [Errno 2] No such file or directory: 'datasets/coco/train2017/000000496106.jpg'

(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2$ cd datasets
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2/datasets$ ls
ADEChallengeData2016  README.md  coco  prepare_ade20k_sem_seg.py  prepare_cocofied_lvis.py  prepare_for_tests.sh  prepare_panoptic_fpn.py
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2/datasets$ ln coco ~/COCO
ln: coco: ディレクトリに対するハードリンクは許可されていません
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2/datasets$ ln ~/COCO coco
ln: /home/minoru/COCO: ディレクトリに対するハードリンクは許可されていません
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2/datasets$ ln -s ~/COCO ./coco
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2/datasets$ cd coco
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2/datasets/coco$ ls
COCO
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2/datasets/coco$ cd ..
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2/datasets$ ll
合計 48
drwxrwxrwx  4 minoru minoru 4096 12月  1 17:16 ./
drwxrwxrwx 18 minoru minoru 4096 12月  1 16:33 ../
drwxrwxrwx  6 minoru minoru 4096 12月  1 11:01 ADEChallengeData2016/
-rw-rw-rw-  1 minoru minoru 4652 11月 30 15:26 README.md
drwxrwxr-x  2 minoru minoru 4096 12月  1 17:16 coco/
-rwxrwxrwx  1 minoru minoru  884 11月 30 20:06 prepare_ade20k_sem_seg.py*
-rwxrwxrwx  1 minoru minoru 7617 11月 30 15:26 prepare_cocofied_lvis.py*
-rwxrwxrwx  1 minoru minoru  823 11月 30 15:26 prepare_for_tests.sh*
-rwxrwxrwx  1 minoru minoru 4351 11月 30 15:26 prepare_panoptic_fpn.py*
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2/datasets$ unlink coco
unlink: 'coco' を削除 (unlink) できません: ディレクトリです
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2/datasets$ ln -s ~/coco ./coco
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2/datasets$ python tools/train_net.py --config-file configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml --num-gpus 1 SOLVER.IMS_PER_BATCH 2 SOLVER.BASE_LR 0.0025
python: can't open file 'tools/train_net.py': [Errno 2] No such file or directory
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2/datasets$ cd ..
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2$ python tools/train_net.py --config-file configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml --num-gpus 1 SOLVER.IMS_PER_BATCH 2 SOLVER.BASE_LR 0.0025
Command Line Args: Namespace(config_file='configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:50152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', '2', 'SOLVER.BASE_LR', '0.0025'], resume=False)
[12/01 17:23:16 detectron2]: Rank of current process: 0. World size: 1
[12/01 17:23:16 detectron2]: Environment info:
----------------------  ----------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.7.15 (default, Nov 24 2022, 21:12:53) [GCC 11.2.0]
numpy                   1.21.6
detectron2              0.6 @/home/minoru/PycharmProjects/STALE/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.3
detectron2 arch flags   7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.11.0+cu113 @/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   NVIDIA GeForce RTX 2060 (arch=7.5)
Driver version          465.19.01
CUDA_HOME               /usr/local/cuda-11.3
Pillow                  9.1.1
torchvision             0.12.0+cu113 @/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20220512
iopath                  0.1.9
cv2                     4.6.0
----------------------  ----------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/01 17:23:16 detectron2]: Command line arguments: Namespace(config_file='configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', dist_url='tcp://127.0.0.1:50152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', '2', 'SOLVER.BASE_LR', '0.0025'], resume=False)
[12/01 17:23:16 detectron2]: Contents of args.config_file=configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[12/01 17:23:16 detectron2]: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - coco_2017_val
  TRAIN:
  - coco_2017_train
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
    - - 64
    - - 128
    - - 256
    - - 512
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: true
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 103.53
  - 116.28
  - 123.675
  PIXEL_STD:
  - 1.0
  - 1.0
  - 1.0
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: true
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id001
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: FastRCNNConvFCHead
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    - p6
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: detectron2://ImageNetPretrained/MSRA/R-50.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.0025
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 90000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 60000
  - 80000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/01 17:23:16 detectron2]: Full config saved to ./output/config.yaml
[12/01 17:23:16 d2.utils.env]: Using a generated random seed 16752949
[12/01 17:23:18 d2.engine.defaults]: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc_relu1): ReLU()
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      (fc_relu2): ReLU()
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=81, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=320, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn3): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (mask_fcn4): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (deconv_relu): ReLU()
      (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[12/01 17:23:30 d2.data.datasets.coco]: Loading datasets/coco/annotations/instances_train2017.json takes 11.76 seconds.
[12/01 17:23:31 d2.data.datasets.coco]: Loaded 118287 images in COCO format from datasets/coco/annotations/instances_train2017.json
[12/01 17:23:36 d2.data.build]: Removed 1021 images with no usable annotations. 117266 images left.
[12/01 17:23:39 d2.data.build]: Distribution of instances among all 80 categories:
|   category    | #instances   |   category   | #instances   |   category    | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:-------------:|:-------------|
|    person     | 257253       |   bicycle    | 7056         |      car      | 43533        |
|  motorcycle   | 8654         |   airplane   | 5129         |      bus      | 6061         |
|     train     | 4570         |    truck     | 9970         |     boat      | 10576        |
| traffic light | 12842        | fire hydrant | 1865         |   stop sign   | 1983         |
| parking meter | 1283         |    bench     | 9820         |     bird      | 10542        |
|      cat      | 4766         |     dog      | 5500         |     horse     | 6567         |
|     sheep     | 9223         |     cow      | 8014         |   elephant    | 5484         |
|     bear      | 1294         |    zebra     | 5269         |    giraffe    | 5128         |
|   backpack    | 8714         |   umbrella   | 11265        |    handbag    | 12342        |
|      tie      | 6448         |   suitcase   | 6112         |    frisbee    | 2681         |
|     skis      | 6623         |  snowboard   | 2681         |  sports ball  | 6299         |
|     kite      | 8802         | baseball bat | 3273         | baseball gl.. | 3747         |
|  skateboard   | 5536         |  surfboard   | 6095         | tennis racket | 4807         |
|    bottle     | 24070        |  wine glass  | 7839         |      cup      | 20574        |
|     fork      | 5474         |    knife     | 7760         |     spoon     | 6159         |
|     bowl      | 14323        |    banana    | 9195         |     apple     | 5776         |
|   sandwich    | 4356         |    orange    | 6302         |   broccoli    | 7261         |
|    carrot     | 7758         |   hot dog    | 2884         |     pizza     | 5807         |
|     donut     | 7005         |     cake     | 6296         |     chair     | 38073        |
|     couch     | 5779         | potted plant | 8631         |      bed      | 4192         |
| dining table  | 15695        |    toilet    | 4149         |      tv       | 5803         |
|    laptop     | 4960         |    mouse     | 2261         |    remote     | 5700         |
|   keyboard    | 2854         |  cell phone  | 6422         |   microwave   | 1672         |
|     oven      | 3334         |   toaster    | 225          |     sink      | 5609         |
| refrigerator  | 2634         |     book     | 24077        |     clock     | 6320         |
|     vase      | 6577         |   scissors   | 1464         |  teddy bear   | 4729         |
|  hair drier   | 198          |  toothbrush  | 1945         |               |              |
|     total     | 849949       |              |              |               |              |
[12/01 17:23:39 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/01 17:23:39 d2.data.build]: Using training sampler TrainingSampler
[12/01 17:23:39 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/01 17:23:39 d2.data.common]: Serializing 117266 elements to byte tensors and concatenating them all ...
[12/01 17:23:42 d2.data.common]: Serialized dataset takes 451.21 MiB
[12/01 17:23:44 fvcore.common.checkpoint]: [Checkpointer] Loading from detectron2://ImageNetPretrained/MSRA/R-50.pkl ...
[12/01 17:23:44 d2.checkpoint.c2_model_loading]: Renaming Caffe2 weights ......
[12/01 17:23:45 d2.checkpoint.c2_model_loading]: Following weights matched with submodule backbone.bottom_up:
| Names in Model    | Names in Checkpoint      | Shapes                                          |
|:------------------|:-------------------------|:------------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w} | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w} | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w} | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w} | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w} | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5_0_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5_0_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5_0_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5_0_branch1_{bn_*,w}  | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5_1_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5_1_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5_1_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5_2_branch2a_{bn_*,w} | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5_2_branch2b_{bn_*,w} | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5_2_branch2c_{bn_*,w} | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.norm.* | res_conv1_bn_*           | (64,) (64,) (64,) (64,)                         |
| stem.conv1.weight | conv1_w                  | (64, 3, 7, 7)                                   |
WARNING [12/01 17:23:45 fvcore.common.checkpoint]: Some model parameters or buffers are not found in the checkpoint:
backbone.fpn_lateral2.{bias, weight}
backbone.fpn_lateral3.{bias, weight}
backbone.fpn_lateral4.{bias, weight}
backbone.fpn_lateral5.{bias, weight}
backbone.fpn_output2.{bias, weight}
backbone.fpn_output3.{bias, weight}
backbone.fpn_output4.{bias, weight}
backbone.fpn_output5.{bias, weight}
proposal_generator.rpn_head.anchor_deltas.{bias, weight}
proposal_generator.rpn_head.conv.{bias, weight}
proposal_generator.rpn_head.objectness_logits.{bias, weight}
roi_heads.box_head.fc1.{bias, weight}
roi_heads.box_head.fc2.{bias, weight}
roi_heads.box_predictor.bbox_pred.{bias, weight}
roi_heads.box_predictor.cls_score.{bias, weight}
roi_heads.mask_head.deconv.{bias, weight}
roi_heads.mask_head.mask_fcn1.{bias, weight}
roi_heads.mask_head.mask_fcn2.{bias, weight}
roi_heads.mask_head.mask_fcn3.{bias, weight}
roi_heads.mask_head.mask_fcn4.{bias, weight}
roi_heads.mask_head.predictor.{bias, weight}
WARNING [12/01 17:23:45 fvcore.common.checkpoint]: The checkpoint state_dict contains keys that are not used by the model:
  fc1000.{bias, weight}
  stem.conv1.bias
[12/01 17:23:45 d2.engine.train_loop]: Starting training from iteration 0
/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/functional.py:568: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2228.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[12/01 17:23:52 d2.utils.events]:  eta: 8:52:30  iter: 19  total_loss: 4.988  loss_cls: 3.547  loss_box_reg: 0.008857  loss_mask: 0.6931  loss_rpn_cls: 0.6773  loss_rpn_loc: 0.1132  time: 0.3565  data_time: 0.0144  lr: 4.9952e-05  max_mem: 2551M
[12/01 17:24:00 d2.utils.events]:  eta: 9:21:15  iter: 39  total_loss: 2.118  loss_cls: 0.4304  loss_box_reg: 0.02592  loss_mask: 0.6925  loss_rpn_cls: 0.651  loss_rpn_loc: 0.1775  time: 0.3727  data_time: 0.0026  lr: 9.9902e-05  max_mem: 2674M
[12/01 17:24:08 d2.utils.events]:  eta: 9:37:32  iter: 59  total_loss: 1.773  loss_cls: 0.3001  loss_box_reg: 0.05352  loss_mask: 0.692  loss_rpn_cls: 0.564  loss_rpn_loc: 0.1108  time: 0.3831  data_time: 0.0026  lr: 0.00014985  max_mem: 2674M
[12/01 17:24:16 d2.utils.events]:  eta: 9:43:52  iter: 79  total_loss: 1.686  loss_cls: 0.2694  loss_box_reg: 0.05356  loss_mask: 0.6926  loss_rpn_cls: 0.4442  loss_rpn_loc: 0.1245  time: 0.3901  data_time: 0.0026  lr: 0.0001998  max_mem: 2710M
[12/01 17:24:24 d2.utils.events]:  eta: 9:41:37  iter: 99  total_loss: 1.571  loss_cls: 0.3317  loss_box_reg: 0.08967  loss_mask: 0.691  loss_rpn_cls: 0.3363  loss_rpn_loc: 0.09967  time: 0.3891  data_time: 0.0025  lr: 0.00024975  max_mem: 2710M
[12/01 17:24:32 d2.utils.events]:  eta: 9:44:40  iter: 119  total_loss: 1.454  loss_cls: 0.2879  loss_box_reg: 0.08784  loss_mask: 0.6895  loss_rpn_cls: 0.2806  loss_rpn_loc: 0.09293  time: 0.3899  data_time: 0.0025  lr: 0.0002997  max_mem: 2710M
[12/01 17:24:40 d2.utils.events]:  eta: 9:46:22  iter: 139  total_loss: 1.745  loss_cls: 0.344  loss_box_reg: 0.1215  loss_mask: 0.6912  loss_rpn_cls: 0.3365  loss_rpn_loc: 0.1657  time: 0.3916  data_time: 0.0025  lr: 0.00034965  max_mem: 2764M
[12/01 17:24:48 d2.utils.events]:  eta: 9:50:15  iter: 159  total_loss: 1.556  loss_cls: 0.3252  loss_box_reg: 0.132  loss_mask: 0.6876  loss_rpn_cls: 0.2488  loss_rpn_loc: 0.09361  time: 0.3932  data_time: 0.0024  lr: 0.0003996  max_mem: 2764M
[12/01 17:24:57 d2.utils.events]:  eta: 9:54:02  iter: 179  total_loss: 1.429  loss_cls: 0.3266  loss_box_reg: 0.1762  loss_mask: 0.689  loss_rpn_cls: 0.1903  loss_rpn_loc: 0.07298  time: 0.3967  data_time: 0.0025  lr: 0.00044955  max_mem: 2764M
[12/01 17:25:05 d2.utils.events]:  eta: 9:54:30  iter: 199  total_loss: 1.334  loss_cls: 0.293  loss_box_reg: 0.1144  loss_mask: 0.6868  loss_rpn_cls: 0.179  loss_rpn_loc: 0.07022  time: 0.3980  data_time: 0.0026  lr: 0.0004995  max_mem: 2764M
[12/01 17:25:13 d2.utils.events]:  eta: 9:55:45  iter: 219  total_loss: 1.559  loss_cls: 0.3491  loss_box_reg: 0.1758  loss_mask: 0.6877  loss_rpn_cls: 0.1866  loss_rpn_loc: 0.06779  time: 0.3996  data_time: 0.0025  lr: 0.00054945  max_mem: 2764M
[12/01 17:25:22 d2.utils.events]:  eta: 9:59:14  iter: 239  total_loss: 1.554  loss_cls: 0.3245  loss_box_reg: 0.1301  loss_mask: 0.6809  loss_rpn_cls: 0.2418  loss_rpn_loc: 0.159  time: 0.4021  data_time: 0.0026  lr: 0.0005994  max_mem: 2764M
[12/01 17:25:30 d2.utils.events]:  eta: 9:56:53  iter: 259  total_loss: 1.497  loss_cls: 0.2958  loss_box_reg: 0.102  loss_mask: 0.6817  loss_rpn_cls: 0.1743  loss_rpn_loc: 0.1123  time: 0.4020  data_time: 0.0024  lr: 0.00064935  max_mem: 2764M
[12/01 17:25:38 d2.utils.events]:  eta: 9:55:34  iter: 279  total_loss: 1.32  loss_cls: 0.2163  loss_box_reg: 0.08226  loss_mask: 0.683  loss_rpn_cls: 0.2054  loss_rpn_loc: 0.1  time: 0.4014  data_time: 0.0026  lr: 0.0006993  max_mem: 2764M
[12/01 17:25:46 d2.utils.events]:  eta: 9:58:50  iter: 299  total_loss: 1.465  loss_cls: 0.3736  loss_box_reg: 0.1126  loss_mask: 0.6872  loss_rpn_cls: 0.1646  loss_rpn_loc: 0.112  time: 0.4024  data_time: 0.0027  lr: 0.00074925  max_mem: 2764M
[12/01 17:25:54 d2.utils.events]:  eta: 10:01:43  iter: 319  total_loss: 1.159  loss_cls: 0.1628  loss_box_reg: 0.05363  loss_mask: 0.6718  loss_rpn_cls: 0.1697  loss_rpn_loc: 0.09284  time: 0.4032  data_time: 0.0027  lr: 0.0007992  max_mem: 2764M
[12/01 17:26:02 d2.utils.events]:  eta: 10:01:00  iter: 339  total_loss: 1.472  loss_cls: 0.2812  loss_box_reg: 0.1563  loss_mask: 0.68  loss_rpn_cls: 0.1768  loss_rpn_loc: 0.1066  time: 0.4024  data_time: 0.0027  lr: 0.00084915  max_mem: 2764M
[12/01 17:26:10 d2.utils.events]:  eta: 10:02:25  iter: 359  total_loss: 1.473  loss_cls: 0.3693  loss_box_reg: 0.1789  loss_mask: 0.6726  loss_rpn_cls: 0.1391  loss_rpn_loc: 0.07053  time: 0.4035  data_time: 0.0027  lr: 0.0008991  max_mem: 2764M
[12/01 17:26:19 d2.utils.events]:  eta: 10:03:16  iter: 379  total_loss: 1.571  loss_cls: 0.3805  loss_box_reg: 0.1631  loss_mask: 0.6686  loss_rpn_cls: 0.2001  loss_rpn_loc: 0.1321  time: 0.4042  data_time: 0.0027  lr: 0.00094905  max_mem: 2764M
[12/01 17:26:27 d2.utils.events]:  eta: 10:04:44  iter: 399  total_loss: 1.328  loss_cls: 0.2745  loss_box_reg: 0.132  loss_mask: 0.681  loss_rpn_cls: 0.1444  loss_rpn_loc: 0.1125  time: 0.4044  data_time: 0.0028  lr: 0.000999  max_mem: 2764M
[12/01 17:26:35 d2.utils.events]:  eta: 10:03:47  iter: 419  total_loss: 1.426  loss_cls: 0.3722  loss_box_reg: 0.2199  loss_mask: 0.6687  loss_rpn_cls: 0.09914  loss_rpn_loc: 0.05359  time: 0.4041  data_time: 0.0028  lr: 0.001049  max_mem: 2764M
[12/01 17:26:43 d2.utils.events]:  eta: 10:04:28  iter: 439  total_loss: 1.535  loss_cls: 0.3798  loss_box_reg: 0.1979  loss_mask: 0.6691  loss_rpn_cls: 0.1403  loss_rpn_loc: 0.09882  time: 0.4050  data_time: 0.0026  lr: 0.0010989  max_mem: 2764M
[12/01 17:26:52 d2.utils.events]:  eta: 10:04:41  iter: 459  total_loss: 1.457  loss_cls: 0.2956  loss_box_reg: 0.1435  loss_mask: 0.6684  loss_rpn_cls: 0.1777  loss_rpn_loc: 0.07547  time: 0.4051  data_time: 0.0027  lr: 0.0011489  max_mem: 2764M
[12/01 17:27:00 d2.utils.events]:  eta: 10:04:33  iter: 479  total_loss: 1.493  loss_cls: 0.3154  loss_box_reg: 0.1823  loss_mask: 0.6701  loss_rpn_cls: 0.1751  loss_rpn_loc: 0.1271  time: 0.4053  data_time: 0.0027  lr: 0.0011988  max_mem: 2764M
[12/01 17:27:09 d2.utils.events]:  eta: 10:06:44  iter: 499  total_loss: 1.687  loss_cls: 0.4619  loss_box_reg: 0.2502  loss_mask: 0.6612  loss_rpn_cls: 0.163  loss_rpn_loc: 0.1004  time: 0.4066  data_time: 0.0028  lr: 0.0012488  max_mem: 2764M
[12/01 17:27:17 d2.utils.events]:  eta: 10:07:21  iter: 519  total_loss: 1.52  loss_cls: 0.3921  loss_box_reg: 0.1823  loss_mask: 0.6598  loss_rpn_cls: 0.1154  loss_rpn_loc: 0.1003  time: 0.4066  data_time: 0.0029  lr: 0.0012987  max_mem: 2764M
[12/01 17:27:25 d2.utils.events]:  eta: 10:08:06  iter: 539  total_loss: 1.628  loss_cls: 0.523  loss_box_reg: 0.2673  loss_mask: 0.6613  loss_rpn_cls: 0.1449  loss_rpn_loc: 0.0953  time: 0.4075  data_time: 0.0027  lr: 0.0013487  max_mem: 2764M
[12/01 17:27:34 d2.utils.events]:  eta: 10:08:35  iter: 559  total_loss: 1.451  loss_cls: 0.3603  loss_box_reg: 0.1952  loss_mask: 0.6392  loss_rpn_cls: 0.1263  loss_rpn_loc: 0.09375  time: 0.4080  data_time: 0.0029  lr: 0.0013986  max_mem: 2764M
[12/01 17:27:42 d2.utils.events]:  eta: 10:07:49  iter: 579  total_loss: 1.274  loss_cls: 0.2643  loss_box_reg: 0.1466  loss_mask: 0.6214  loss_rpn_cls: 0.1148  loss_rpn_loc: 0.06455  time: 0.4075  data_time: 0.0025  lr: 0.0014486  max_mem: 2764M
[12/01 17:27:50 d2.utils.events]:  eta: 10:07:41  iter: 599  total_loss: 1.509  loss_cls: 0.3608  loss_box_reg: 0.1987  loss_mask: 0.6508  loss_rpn_cls: 0.1508  loss_rpn_loc: 0.07799  time: 0.4073  data_time: 0.0028  lr: 0.0014985  max_mem: 2764M
[12/01 17:27:58 d2.utils.events]:  eta: 10:07:33  iter: 619  total_loss: 1.452  loss_cls: 0.3545  loss_box_reg: 0.2199  loss_mask: 0.6309  loss_rpn_cls: 0.1701  loss_rpn_loc: 0.08833  time: 0.4075  data_time: 0.0026  lr: 0.0015485  max_mem: 2764M
[12/01 17:28:06 d2.utils.events]:  eta: 10:07:17  iter: 639  total_loss: 1.514  loss_cls: 0.4022  loss_box_reg: 0.2584  loss_mask: 0.616  loss_rpn_cls: 0.156  loss_rpn_loc: 0.09416  time: 0.4072  data_time: 0.0026  lr: 0.0015984  max_mem: 2764M
[12/01 17:28:15 d2.utils.events]:  eta: 10:08:04  iter: 659  total_loss: 1.837  loss_cls: 0.5727  loss_box_reg: 0.2953  loss_mask: 0.6367  loss_rpn_cls: 0.1276  loss_rpn_loc: 0.118  time: 0.4080  data_time: 0.0027  lr: 0.0016484  max_mem: 2764M
[12/01 17:28:23 d2.utils.events]:  eta: 10:09:54  iter: 679  total_loss: 1.627  loss_cls: 0.4724  loss_box_reg: 0.2417  loss_mask: 0.6392  loss_rpn_cls: 0.1233  loss_rpn_loc: 0.1072  time: 0.4089  data_time: 0.0025  lr: 0.0016983  max_mem: 2764M
[12/01 17:28:32 d2.utils.events]:  eta: 10:09:46  iter: 699  total_loss: 1.562  loss_cls: 0.3903  loss_box_reg: 0.2458  loss_mask: 0.621  loss_rpn_cls: 0.1438  loss_rpn_loc: 0.1098  time: 0.4091  data_time: 0.0027  lr: 0.0017483  max_mem: 2764M
[12/01 17:28:40 d2.utils.events]:  eta: 10:10:54  iter: 719  total_loss: 1.766  loss_cls: 0.4968  loss_box_reg: 0.2837  loss_mask: 0.6238  loss_rpn_cls: 0.133  loss_rpn_loc: 0.1006  time: 0.4094  data_time: 0.0027  lr: 0.0017982  max_mem: 2764M
[12/01 17:28:48 d2.utils.events]:  eta: 10:10:51  iter: 739  total_loss: 1.421  loss_cls: 0.3685  loss_box_reg: 0.1961  loss_mask: 0.5886  loss_rpn_cls: 0.1368  loss_rpn_loc: 0.09861  time: 0.4095  data_time: 0.0027  lr: 0.0018482  max_mem: 2764M
[12/01 17:28:57 d2.utils.events]:  eta: 10:11:04  iter: 759  total_loss: 1.604  loss_cls: 0.3639  loss_box_reg: 0.2502  loss_mask: 0.6093  loss_rpn_cls: 0.1375  loss_rpn_loc: 0.09806  time: 0.4099  data_time: 0.0026  lr: 0.0018981  max_mem: 2764M
[12/01 17:29:05 d2.utils.events]:  eta: 10:11:24  iter: 779  total_loss: 1.475  loss_cls: 0.3896  loss_box_reg: 0.2536  loss_mask: 0.5979  loss_rpn_cls: 0.1178  loss_rpn_loc: 0.09955  time: 0.4103  data_time: 0.0027  lr: 0.0019481  max_mem: 2764M
[12/01 17:29:14 d2.utils.events]:  eta: 10:12:15  iter: 799  total_loss: 1.442  loss_cls: 0.3104  loss_box_reg: 0.1685  loss_mask: 0.5889  loss_rpn_cls: 0.1283  loss_rpn_loc: 0.08323  time: 0.4108  data_time: 0.0028  lr: 0.001998  max_mem: 2764M
[12/01 17:29:23 d2.utils.events]:  eta: 10:12:59  iter: 819  total_loss: 1.529  loss_cls: 0.4634  loss_box_reg: 0.2631  loss_mask: 0.5856  loss_rpn_cls: 0.1591  loss_rpn_loc: 0.09802  time: 0.4113  data_time: 0.0028  lr: 0.002048  max_mem: 2764M
[12/01 17:29:32 d2.utils.events]:  eta: 10:13:53  iter: 839  total_loss: 1.839  loss_cls: 0.5916  loss_box_reg: 0.332  loss_mask: 0.6235  loss_rpn_cls: 0.148  loss_rpn_loc: 0.1246  time: 0.4124  data_time: 0.0027  lr: 0.0020979  max_mem: 2764M
[12/01 17:29:41 d2.utils.events]:  eta: 10:15:27  iter: 859  total_loss: 1.569  loss_cls: 0.3762  loss_box_reg: 0.2661  loss_mask: 0.6384  loss_rpn_cls: 0.1419  loss_rpn_loc: 0.08554  time: 0.4131  data_time: 0.0026  lr: 0.0021479  max_mem: 2764M
[12/01 17:29:50 d2.utils.events]:  eta: 10:16:31  iter: 879  total_loss: 1.582  loss_cls: 0.4805  loss_box_reg: 0.2708  loss_mask: 0.6062  loss_rpn_cls: 0.07906  loss_rpn_loc: 0.07914  time: 0.4140  data_time: 0.0028  lr: 0.0021978  max_mem: 2764M
[12/01 17:29:58 d2.utils.events]:  eta: 10:17:14  iter: 899  total_loss: 1.562  loss_cls: 0.4539  loss_box_reg: 0.2928  loss_mask: 0.5753  loss_rpn_cls: 0.1001  loss_rpn_loc: 0.07718  time: 0.4142  data_time: 0.0029  lr: 0.0022478  max_mem: 2764M
[12/01 17:30:07 d2.utils.events]:  eta: 10:17:38  iter: 919  total_loss: 1.735  loss_cls: 0.4729  loss_box_reg: 0.3177  loss_mask: 0.6012  loss_rpn_cls: 0.1302  loss_rpn_loc: 0.13  time: 0.4145  data_time: 0.0028  lr: 0.0022977  max_mem: 2764M
[12/01 17:30:15 d2.utils.events]:  eta: 10:17:42  iter: 939  total_loss: 1.423  loss_cls: 0.3895  loss_box_reg: 0.2359  loss_mask: 0.5895  loss_rpn_cls: 0.1298  loss_rpn_loc: 0.1096  time: 0.4150  data_time: 0.0027  lr: 0.0023477  max_mem: 2764M
[12/01 17:30:25 d2.utils.events]:  eta: 10:18:40  iter: 959  total_loss: 1.723  loss_cls: 0.503  loss_box_reg: 0.2747  loss_mask: 0.6127  loss_rpn_cls: 0.1223  loss_rpn_loc: 0.09692  time: 0.4158  data_time: 0.0026  lr: 0.0023976  max_mem: 2764M
[12/01 17:30:33 d2.utils.events]:  eta: 10:19:07  iter: 979  total_loss: 1.38  loss_cls: 0.3404  loss_box_reg: 0.2021  loss_mask: 0.5505  loss_rpn_cls: 0.1215  loss_rpn_loc: 0.09607  time: 0.4162  data_time: 0.0028  lr: 0.0024476  max_mem: 2764M
[12/01 17:30:42 d2.utils.events]:  eta: 10:19:17  iter: 999  total_loss: 1.557  loss_cls: 0.3765  loss_box_reg: 0.1729  loss_mask: 0.5865  loss_rpn_cls: 0.1284  loss_rpn_loc: 0.09487  time: 0.4165  data_time: 0.0027  lr: 0.0024975  max_mem: 2764M
[12/01 17:30:51 d2.utils.events]:  eta: 10:20:50  iter: 1019  total_loss: 1.744  loss_cls: 0.411  loss_box_reg: 0.3358  loss_mask: 0.599  loss_rpn_cls: 0.07581  loss_rpn_loc: 0.08801  time: 0.4170  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:30:59 d2.utils.events]:  eta: 10:22:50  iter: 1039  total_loss: 1.429  loss_cls: 0.4465  loss_box_reg: 0.2511  loss_mask: 0.5926  loss_rpn_cls: 0.06915  loss_rpn_loc: 0.0769  time: 0.4173  data_time: 0.0026  lr: 0.0025  max_mem: 2764M
[12/01 17:31:08 d2.utils.events]:  eta: 10:24:39  iter: 1059  total_loss: 1.516  loss_cls: 0.4492  loss_box_reg: 0.2777  loss_mask: 0.572  loss_rpn_cls: 0.1097  loss_rpn_loc: 0.08847  time: 0.4177  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:31:17 d2.utils.events]:  eta: 10:25:15  iter: 1079  total_loss: 1.849  loss_cls: 0.6298  loss_box_reg: 0.366  loss_mask: 0.5745  loss_rpn_cls: 0.1395  loss_rpn_loc: 0.1176  time: 0.4181  data_time: 0.0027  lr: 0.0025  max_mem: 2764M
[12/01 17:31:26 d2.utils.events]:  eta: 10:25:46  iter: 1099  total_loss: 1.623  loss_cls: 0.4862  loss_box_reg: 0.3014  loss_mask: 0.5771  loss_rpn_cls: 0.09198  loss_rpn_loc: 0.08407  time: 0.4182  data_time: 0.0026  lr: 0.0025  max_mem: 2764M
[12/01 17:31:34 d2.utils.events]:  eta: 10:25:51  iter: 1119  total_loss: 1.447  loss_cls: 0.3935  loss_box_reg: 0.2499  loss_mask: 0.5323  loss_rpn_cls: 0.1164  loss_rpn_loc: 0.08831  time: 0.4186  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:31:43 d2.utils.events]:  eta: 10:27:24  iter: 1139  total_loss: 1.855  loss_cls: 0.525  loss_box_reg: 0.3659  loss_mask: 0.5836  loss_rpn_cls: 0.09797  loss_rpn_loc: 0.09411  time: 0.4191  data_time: 0.0026  lr: 0.0025  max_mem: 2764M
[12/01 17:31:52 d2.utils.events]:  eta: 10:28:00  iter: 1159  total_loss: 1.456  loss_cls: 0.4193  loss_box_reg: 0.2105  loss_mask: 0.552  loss_rpn_cls: 0.1241  loss_rpn_loc: 0.09652  time: 0.4193  data_time: 0.0026  lr: 0.0025  max_mem: 2764M
[12/01 17:32:01 d2.utils.events]:  eta: 10:28:42  iter: 1179  total_loss: 1.706  loss_cls: 0.5364  loss_box_reg: 0.3148  loss_mask: 0.5659  loss_rpn_cls: 0.1205  loss_rpn_loc: 0.08579  time: 0.4201  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:32:10 d2.utils.events]:  eta: 10:29:21  iter: 1199  total_loss: 1.505  loss_cls: 0.4186  loss_box_reg: 0.2954  loss_mask: 0.5463  loss_rpn_cls: 0.09856  loss_rpn_loc: 0.09608  time: 0.4203  data_time: 0.0026  lr: 0.0025  max_mem: 2764M
[12/01 17:32:19 d2.utils.events]:  eta: 10:29:21  iter: 1219  total_loss: 1.557  loss_cls: 0.4457  loss_box_reg: 0.2828  loss_mask: 0.5799  loss_rpn_cls: 0.08486  loss_rpn_loc: 0.08985  time: 0.4205  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:32:27 d2.utils.events]:  eta: 10:29:13  iter: 1239  total_loss: 1.482  loss_cls: 0.517  loss_box_reg: 0.2967  loss_mask: 0.5358  loss_rpn_cls: 0.1027  loss_rpn_loc: 0.06523  time: 0.4207  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:32:36 d2.utils.events]:  eta: 10:30:55  iter: 1259  total_loss: 1.638  loss_cls: 0.503  loss_box_reg: 0.2903  loss_mask: 0.5654  loss_rpn_cls: 0.1144  loss_rpn_loc: 0.1204  time: 0.4209  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:32:44 d2.utils.events]:  eta: 10:31:34  iter: 1279  total_loss: 1.415  loss_cls: 0.4056  loss_box_reg: 0.2727  loss_mask: 0.5411  loss_rpn_cls: 0.1003  loss_rpn_loc: 0.07358  time: 0.4210  data_time: 0.0027  lr: 0.0025  max_mem: 2764M
[12/01 17:32:54 d2.utils.events]:  eta: 10:32:39  iter: 1299  total_loss: 1.585  loss_cls: 0.493  loss_box_reg: 0.3497  loss_mask: 0.5324  loss_rpn_cls: 0.1077  loss_rpn_loc: 0.09492  time: 0.4215  data_time: 0.0027  lr: 0.0025  max_mem: 2764M
[12/01 17:33:02 d2.utils.events]:  eta: 10:33:16  iter: 1319  total_loss: 1.649  loss_cls: 0.5328  loss_box_reg: 0.3085  loss_mask: 0.5504  loss_rpn_cls: 0.1395  loss_rpn_loc: 0.112  time: 0.4217  data_time: 0.0026  lr: 0.0025  max_mem: 2764M
[12/01 17:33:11 d2.utils.events]:  eta: 10:34:51  iter: 1339  total_loss: 1.53  loss_cls: 0.4801  loss_box_reg: 0.3305  loss_mask: 0.5167  loss_rpn_cls: 0.09321  loss_rpn_loc: 0.08197  time: 0.4219  data_time: 0.0026  lr: 0.0025  max_mem: 2764M
[12/01 17:33:20 d2.utils.events]:  eta: 10:35:03  iter: 1359  total_loss: 1.406  loss_cls: 0.4437  loss_box_reg: 0.2399  loss_mask: 0.5065  loss_rpn_cls: 0.0915  loss_rpn_loc: 0.06146  time: 0.4221  data_time: 0.0027  lr: 0.0025  max_mem: 2764M
[12/01 17:33:28 d2.utils.events]:  eta: 10:35:07  iter: 1379  total_loss: 1.581  loss_cls: 0.4938  loss_box_reg: 0.343  loss_mask: 0.54  loss_rpn_cls: 0.1118  loss_rpn_loc: 0.1074  time: 0.4223  data_time: 0.0026  lr: 0.0025  max_mem: 2764M
[12/01 17:33:37 d2.utils.events]:  eta: 10:35:37  iter: 1399  total_loss: 1.391  loss_cls: 0.3565  loss_box_reg: 0.2738  loss_mask: 0.5297  loss_rpn_cls: 0.1343  loss_rpn_loc: 0.1004  time: 0.4223  data_time: 0.0026  lr: 0.0025  max_mem: 2764M
[12/01 17:33:46 d2.utils.events]:  eta: 10:36:18  iter: 1419  total_loss: 1.553  loss_cls: 0.5185  loss_box_reg: 0.327  loss_mask: 0.5321  loss_rpn_cls: 0.07906  loss_rpn_loc: 0.08091  time: 0.4226  data_time: 0.0027  lr: 0.0025  max_mem: 2764M
[12/01 17:33:55 d2.utils.events]:  eta: 10:37:12  iter: 1439  total_loss: 2.033  loss_cls: 0.7054  loss_box_reg: 0.4472  loss_mask: 0.5341  loss_rpn_cls: 0.12  loss_rpn_loc: 0.1116  time: 0.4232  data_time: 0.0029  lr: 0.0025  max_mem: 2764M
[12/01 17:34:04 d2.utils.events]:  eta: 10:37:50  iter: 1459  total_loss: 1.543  loss_cls: 0.4747  loss_box_reg: 0.2557  loss_mask: 0.5098  loss_rpn_cls: 0.1128  loss_rpn_loc: 0.08015  time: 0.4233  data_time: 0.0027  lr: 0.0025  max_mem: 2764M
[12/01 17:34:12 d2.utils.events]:  eta: 10:39:24  iter: 1479  total_loss: 1.778  loss_cls: 0.5287  loss_box_reg: 0.3817  loss_mask: 0.5407  loss_rpn_cls: 0.1168  loss_rpn_loc: 0.1017  time: 0.4235  data_time: 0.0025  lr: 0.0025  max_mem: 2764M
[12/01 17:34:21 d2.utils.events]:  eta: 10:39:15  iter: 1499  total_loss: 1.723  loss_cls: 0.5251  loss_box_reg: 0.3744  loss_mask: 0.5425  loss_rpn_cls: 0.122  loss_rpn_loc: 0.1184  time: 0.4237  data_time: 0.0027  lr: 0.0025  max_mem: 2764M
[12/01 17:34:30 d2.utils.events]:  eta: 10:39:07  iter: 1519  total_loss: 1.459  loss_cls: 0.5237  loss_box_reg: 0.3498  loss_mask: 0.5035  loss_rpn_cls: 0.1127  loss_rpn_loc: 0.06346  time: 0.4237  data_time: 0.0027  lr: 0.0025  max_mem: 2764M
[12/01 17:34:39 d2.utils.events]:  eta: 10:39:03  iter: 1539  total_loss: 1.486  loss_cls: 0.4241  loss_box_reg: 0.3007  loss_mask: 0.478  loss_rpn_cls: 0.07624  loss_rpn_loc: 0.0938  time: 0.4239  data_time: 0.0027  lr: 0.0025  max_mem: 2764M
[12/01 17:34:47 d2.utils.events]:  eta: 10:39:18  iter: 1559  total_loss: 1.486  loss_cls: 0.4914  loss_box_reg: 0.3268  loss_mask: 0.4856  loss_rpn_cls: 0.09685  loss_rpn_loc: 0.08932  time: 0.4242  data_time: 0.0027  lr: 0.0025  max_mem: 2764M
[12/01 17:34:56 d2.utils.events]:  eta: 10:40:09  iter: 1579  total_loss: 1.636  loss_cls: 0.4881  loss_box_reg: 0.3196  loss_mask: 0.4786  loss_rpn_cls: 0.09263  loss_rpn_loc: 0.08728  time: 0.4243  data_time: 0.0026  lr: 0.0025  max_mem: 2764M
[12/01 17:35:05 d2.utils.events]:  eta: 10:42:13  iter: 1599  total_loss: 1.623  loss_cls: 0.4764  loss_box_reg: 0.2841  loss_mask: 0.5096  loss_rpn_cls: 0.1091  loss_rpn_loc: 0.09342  time: 0.4245  data_time: 0.0027  lr: 0.0025  max_mem: 2764M
[12/01 17:35:14 d2.utils.events]:  eta: 10:42:46  iter: 1619  total_loss: 1.497  loss_cls: 0.4368  loss_box_reg: 0.2641  loss_mask: 0.489  loss_rpn_cls: 0.09183  loss_rpn_loc: 0.1267  time: 0.4247  data_time: 0.0026  lr: 0.0025  max_mem: 2764M
[12/01 17:35:22 d2.utils.events]:  eta: 10:42:50  iter: 1639  total_loss: 1.59  loss_cls: 0.502  loss_box_reg: 0.2682  loss_mask: 0.4974  loss_rpn_cls: 0.08172  loss_rpn_loc: 0.1014  time: 0.4245  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:35:31 d2.utils.events]:  eta: 10:43:00  iter: 1659  total_loss: 1.621  loss_cls: 0.4477  loss_box_reg: 0.2458  loss_mask: 0.5146  loss_rpn_cls: 0.1218  loss_rpn_loc: 0.08334  time: 0.4248  data_time: 0.0027  lr: 0.0025  max_mem: 2764M
[12/01 17:35:40 d2.utils.events]:  eta: 10:42:32  iter: 1679  total_loss: 1.444  loss_cls: 0.4542  loss_box_reg: 0.3279  loss_mask: 0.5016  loss_rpn_cls: 0.1035  loss_rpn_loc: 0.09903  time: 0.4249  data_time: 0.0029  lr: 0.0025  max_mem: 2764M
[12/01 17:35:48 d2.utils.events]:  eta: 10:42:11  iter: 1699  total_loss: 1.779  loss_cls: 0.4677  loss_box_reg: 0.3096  loss_mask: 0.5113  loss_rpn_cls: 0.1281  loss_rpn_loc: 0.1341  time: 0.4250  data_time: 0.0030  lr: 0.0025  max_mem: 2764M
[12/01 17:35:57 d2.utils.events]:  eta: 10:43:27  iter: 1719  total_loss: 1.506  loss_cls: 0.4885  loss_box_reg: 0.3254  loss_mask: 0.4707  loss_rpn_cls: 0.08893  loss_rpn_loc: 0.09104  time: 0.4252  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:36:06 d2.utils.events]:  eta: 10:44:56  iter: 1739  total_loss: 1.594  loss_cls: 0.5256  loss_box_reg: 0.3161  loss_mask: 0.4465  loss_rpn_cls: 0.08319  loss_rpn_loc: 0.06627  time: 0.4254  data_time: 0.0025  lr: 0.0025  max_mem: 2764M
[12/01 17:36:15 d2.utils.events]:  eta: 10:45:04  iter: 1759  total_loss: 1.6  loss_cls: 0.5304  loss_box_reg: 0.3799  loss_mask: 0.4885  loss_rpn_cls: 0.08097  loss_rpn_loc: 0.09793  time: 0.4256  data_time: 0.0027  lr: 0.0025  max_mem: 2764M
[12/01 17:36:23 d2.utils.events]:  eta: 10:44:59  iter: 1779  total_loss: 1.545  loss_cls: 0.4783  loss_box_reg: 0.3291  loss_mask: 0.4766  loss_rpn_cls: 0.07763  loss_rpn_loc: 0.07343  time: 0.4256  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:36:32 d2.utils.events]:  eta: 10:44:53  iter: 1799  total_loss: 1.434  loss_cls: 0.3573  loss_box_reg: 0.2534  loss_mask: 0.4818  loss_rpn_cls: 0.1017  loss_rpn_loc: 0.09173  time: 0.4257  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:36:40 d2.utils.events]:  eta: 10:45:06  iter: 1819  total_loss: 1.395  loss_cls: 0.4161  loss_box_reg: 0.3118  loss_mask: 0.4452  loss_rpn_cls: 0.1231  loss_rpn_loc: 0.09203  time: 0.4257  data_time: 0.0026  lr: 0.0025  max_mem: 2764M
[12/01 17:36:49 d2.utils.events]:  eta: 10:44:35  iter: 1839  total_loss: 1.439  loss_cls: 0.4487  loss_box_reg: 0.2397  loss_mask: 0.483  loss_rpn_cls: 0.1106  loss_rpn_loc: 0.1073  time: 0.4256  data_time: 0.0027  lr: 0.0025  max_mem: 2764M
[12/01 17:36:57 d2.utils.events]:  eta: 10:44:24  iter: 1859  total_loss: 1.591  loss_cls: 0.4821  loss_box_reg: 0.3193  loss_mask: 0.4836  loss_rpn_cls: 0.1176  loss_rpn_loc: 0.08855  time: 0.4256  data_time: 0.0030  lr: 0.0025  max_mem: 2764M
[12/01 17:37:07 d2.utils.events]:  eta: 10:44:31  iter: 1879  total_loss: 1.416  loss_cls: 0.4754  loss_box_reg: 0.2909  loss_mask: 0.4536  loss_rpn_cls: 0.05858  loss_rpn_loc: 0.05647  time: 0.4260  data_time: 0.0029  lr: 0.0025  max_mem: 2764M
[12/01 17:37:15 d2.utils.events]:  eta: 10:44:37  iter: 1899  total_loss: 1.246  loss_cls: 0.3391  loss_box_reg: 0.2299  loss_mask: 0.4893  loss_rpn_cls: 0.07779  loss_rpn_loc: 0.05384  time: 0.4262  data_time: 0.0026  lr: 0.0025  max_mem: 2764M
[12/01 17:37:24 d2.utils.events]:  eta: 10:44:31  iter: 1919  total_loss: 1.434  loss_cls: 0.386  loss_box_reg: 0.2996  loss_mask: 0.4608  loss_rpn_cls: 0.07438  loss_rpn_loc: 0.08662  time: 0.4264  data_time: 0.0026  lr: 0.0025  max_mem: 2764M
[12/01 17:37:34 d2.utils.events]:  eta: 10:44:47  iter: 1939  total_loss: 1.79  loss_cls: 0.5642  loss_box_reg: 0.435  loss_mask: 0.5289  loss_rpn_cls: 0.1347  loss_rpn_loc: 0.1229  time: 0.4267  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:37:42 d2.utils.events]:  eta: 10:44:14  iter: 1959  total_loss: 1.41  loss_cls: 0.4069  loss_box_reg: 0.2989  loss_mask: 0.4609  loss_rpn_cls: 0.07276  loss_rpn_loc: 0.1004  time: 0.4268  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:37:51 d2.utils.events]:  eta: 10:44:05  iter: 1979  total_loss: 1.481  loss_cls: 0.4595  loss_box_reg: 0.3619  loss_mask: 0.4445  loss_rpn_cls: 0.09789  loss_rpn_loc: 0.07703  time: 0.4271  data_time: 0.0029  lr: 0.0025  max_mem: 2764M
[12/01 17:38:00 d2.utils.events]:  eta: 10:43:25  iter: 1999  total_loss: 1.516  loss_cls: 0.3899  loss_box_reg: 0.2794  loss_mask: 0.4919  loss_rpn_cls: 0.09676  loss_rpn_loc: 0.07814  time: 0.4269  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:38:09 d2.utils.events]:  eta: 10:43:14  iter: 2019  total_loss: 1.426  loss_cls: 0.4105  loss_box_reg: 0.2945  loss_mask: 0.4656  loss_rpn_cls: 0.08728  loss_rpn_loc: 0.0869  time: 0.4272  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:38:18 d2.utils.events]:  eta: 10:43:14  iter: 2039  total_loss: 1.33  loss_cls: 0.4011  loss_box_reg: 0.2708  loss_mask: 0.4418  loss_rpn_cls: 0.1089  loss_rpn_loc: 0.06203  time: 0.4275  data_time: 0.0029  lr: 0.0025  max_mem: 2764M
[12/01 17:38:27 d2.utils.events]:  eta: 10:43:30  iter: 2059  total_loss: 1.382  loss_cls: 0.41  loss_box_reg: 0.3059  loss_mask: 0.4569  loss_rpn_cls: 0.07068  loss_rpn_loc: 0.09279  time: 0.4277  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:38:36 d2.utils.events]:  eta: 10:43:12  iter: 2079  total_loss: 1.404  loss_cls: 0.4409  loss_box_reg: 0.3245  loss_mask: 0.4568  loss_rpn_cls: 0.1063  loss_rpn_loc: 0.08651  time: 0.4278  data_time: 0.0029  lr: 0.0025  max_mem: 2764M
[12/01 17:38:44 d2.utils.events]:  eta: 10:42:48  iter: 2099  total_loss: 1.381  loss_cls: 0.3642  loss_box_reg: 0.2574  loss_mask: 0.4838  loss_rpn_cls: 0.1039  loss_rpn_loc: 0.08085  time: 0.4277  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:38:53 d2.utils.events]:  eta: 10:42:54  iter: 2119  total_loss: 1.256  loss_cls: 0.3169  loss_box_reg: 0.2459  loss_mask: 0.4539  loss_rpn_cls: 0.09516  loss_rpn_loc: 0.1127  time: 0.4278  data_time: 0.0029  lr: 0.0025  max_mem: 2764M
[12/01 17:39:02 d2.utils.events]:  eta: 10:42:30  iter: 2139  total_loss: 1.5  loss_cls: 0.423  loss_box_reg: 0.333  loss_mask: 0.4565  loss_rpn_cls: 0.1342  loss_rpn_loc: 0.1268  time: 0.4281  data_time: 0.0029  lr: 0.0025  max_mem: 2764M
[12/01 17:39:11 d2.utils.events]:  eta: 10:42:37  iter: 2159  total_loss: 1.517  loss_cls: 0.4657  loss_box_reg: 0.3443  loss_mask: 0.4804  loss_rpn_cls: 0.08195  loss_rpn_loc: 0.07494  time: 0.4282  data_time: 0.0028  lr: 0.0025  max_mem: 2764M
[12/01 17:39:20 d2.utils.events]:  eta: 10:42:28  iter: 2179  total_loss: 1.783  loss_cls: 0.5376  loss_box_reg: 0.3596  loss_mask: 0.5012  loss_rpn_cls: 0.1074  loss_rpn_loc: 0.1105  time: 0.4284  data_time: 0.0030  lr: 0.0025  max_mem: 2764M
[12/01 17:39:29 d2.utils.events]:  eta: 10:42:35  iter: 2199  total_loss: 1.413  loss_cls: 0.4678  loss_box_reg: 0.3388  loss_mask: 0.491  loss_rpn_cls: 0.09689  loss_rpn_loc: 0.08048  time: 0.4287  data_time: 0.0028  lr: 0.0025  max_mem: 2769M
[12/01 17:39:38 d2.utils.events]:  eta: 10:42:30  iter: 2219  total_loss: 1.311  loss_cls: 0.3313  loss_box_reg: 0.2404  loss_mask: 0.469  loss_rpn_cls: 0.0943  loss_rpn_loc: 0.0787  time: 0.4288  data_time: 0.0028  lr: 0.0025  max_mem: 2769M
[12/01 17:39:47 d2.utils.events]:  eta: 10:43:05  iter: 2239  total_loss: 1.772  loss_cls: 0.5202  loss_box_reg: 0.4197  loss_mask: 0.4949  loss_rpn_cls: 0.1623  loss_rpn_loc: 0.117  time: 0.4290  data_time: 0.0028  lr: 0.0025  max_mem: 2769M
[12/01 17:39:56 d2.utils.events]:  eta: 10:43:23  iter: 2259  total_loss: 1.49  loss_cls: 0.3963  loss_box_reg: 0.3097  loss_mask: 0.477  loss_rpn_cls: 0.1405  loss_rpn_loc: 0.09191  time: 0.4291  data_time: 0.0028  lr: 0.0025  max_mem: 2769M
[12/01 17:40:04 d2.utils.events]:  eta: 10:43:14  iter: 2279  total_loss: 1.499  loss_cls: 0.4244  loss_box_reg: 0.278  loss_mask: 0.4712  loss_rpn_cls: 0.1252  loss_rpn_loc: 0.1223  time: 0.4292  data_time: 0.0029  lr: 0.0025  max_mem: 2769M
[12/01 17:40:13 d2.utils.events]:  eta: 10:42:39  iter: 2299  total_loss: 1.553  loss_cls: 0.3756  loss_box_reg: 0.2407  loss_mask: 0.4599  loss_rpn_cls: 0.1049  loss_rpn_loc: 0.1047  time: 0.4294  data_time: 0.0028  lr: 0.0025  max_mem: 2769M
[12/01 17:40:23 d2.utils.events]:  eta: 10:42:44  iter: 2319  total_loss: 1.582  loss_cls: 0.3969  loss_box_reg: 0.2767  loss_mask: 0.4887  loss_rpn_cls: 0.1032  loss_rpn_loc: 0.1027  time: 0.4296  data_time: 0.0027  lr: 0.0025  max_mem: 2769M
[12/01 17:40:31 d2.utils.events]:  eta: 10:42:21  iter: 2339  total_loss: 1.255  loss_cls: 0.3566  loss_box_reg: 0.2008  loss_mask: 0.4733  loss_rpn_cls: 0.06504  loss_rpn_loc: 0.04466  time: 0.4295  data_time: 0.0028  lr: 0.0025  max_mem: 2769M
[12/01 17:40:40 d2.utils.events]:  eta: 10:42:12  iter: 2359  total_loss: 1.326  loss_cls: 0.3567  loss_box_reg: 0.2727  loss_mask: 0.4281  loss_rpn_cls: 0.07282  loss_rpn_loc: 0.07354  time: 0.4296  data_time: 0.0028  lr: 0.0025  max_mem: 2769M
[12/01 17:40:49 d2.utils.events]:  eta: 10:42:50  iter: 2379  total_loss: 1.649  loss_cls: 0.5395  loss_box_reg: 0.3842  loss_mask: 0.4923  loss_rpn_cls: 0.09755  loss_rpn_loc: 0.08  time: 0.4299  data_time: 0.0028  lr: 0.0025  max_mem: 2769M
[12/01 17:40:58 d2.utils.events]:  eta: 10:42:55  iter: 2399  total_loss: 1.508  loss_cls: 0.4354  loss_box_reg: 0.31  loss_mask: 0.4675  loss_rpn_cls: 0.09819  loss_rpn_loc: 0.1208  time: 0.4300  data_time: 0.0027  lr: 0.0025  max_mem: 2769M
[12/01 17:41:07 d2.utils.events]:  eta: 10:42:58  iter: 2419  total_loss: 1.469  loss_cls: 0.4454  loss_box_reg: 0.3188  loss_mask: 0.4394  loss_rpn_cls: 0.09772  loss_rpn_loc: 0.06235  time: 0.4301  data_time: 0.0027  lr: 0.0025  max_mem: 2769M
[12/01 17:41:16 d2.utils.events]:  eta: 10:42:36  iter: 2439  total_loss: 1.524  loss_cls: 0.4826  loss_box_reg: 0.3493  loss_mask: 0.4832  loss_rpn_cls: 0.11  loss_rpn_loc: 0.07726  time: 0.4303  data_time: 0.0027  lr: 0.0025  max_mem: 2769M
[12/01 17:41:25 d2.utils.events]:  eta: 10:42:28  iter: 2459  total_loss: 1.203  loss_cls: 0.3553  loss_box_reg: 0.2609  loss_mask: 0.4579  loss_rpn_cls: 0.07437  loss_rpn_loc: 0.04794  time: 0.4303  data_time: 0.0027  lr: 0.0025  max_mem: 2769M
[12/01 17:41:34 d2.utils.events]:  eta: 10:42:25  iter: 2479  total_loss: 1.674  loss_cls: 0.4628  loss_box_reg: 0.4055  loss_mask: 0.4953  loss_rpn_cls: 0.102  loss_rpn_loc: 0.1283  time: 0.4305  data_time: 0.0029  lr: 0.0025  max_mem: 2769M
[12/01 17:41:43 d2.utils.events]:  eta: 10:42:32  iter: 2499  total_loss: 1.534  loss_cls: 0.4448  loss_box_reg: 0.3498  loss_mask: 0.4423  loss_rpn_cls: 0.1034  loss_rpn_loc: 0.09099  time: 0.4307  data_time: 0.0028  lr: 0.0025  max_mem: 2769M
[12/01 17:41:52 d2.utils.events]:  eta: 10:43:18  iter: 2519  total_loss: 1.408  loss_cls: 0.4367  loss_box_reg: 0.3186  loss_mask: 0.4858  loss_rpn_cls: 0.05495  loss_rpn_loc: 0.05907  time: 0.4309  data_time: 0.0027  lr: 0.0025  max_mem: 2769M
[12/01 17:42:00 d2.utils.events]:  eta: 10:43:09  iter: 2539  total_loss: 1.621  loss_cls: 0.485  loss_box_reg: 0.3395  loss_mask: 0.4585  loss_rpn_cls: 0.0996  loss_rpn_loc: 0.1061  time: 0.4309  data_time: 0.0027  lr: 0.0025  max_mem: 2769M
[12/01 17:42:09 d2.utils.events]:  eta: 10:43:00  iter: 2559  total_loss: 1.455  loss_cls: 0.3549  loss_box_reg: 0.2662  loss_mask: 0.4426  loss_rpn_cls: 0.09944  loss_rpn_loc: 0.08905  time: 0.4309  data_time: 0.0026  lr: 0.0025  max_mem: 2769M
[12/01 17:42:18 d2.utils.events]:  eta: 10:43:03  iter: 2579  total_loss: 1.291  loss_cls: 0.4108  loss_box_reg: 0.2711  loss_mask: 0.4679  loss_rpn_cls: 0.09103  loss_rpn_loc: 0.1176  time: 0.4311  data_time: 0.0028  lr: 0.0025  max_mem: 2769M
[12/01 17:42:27 d2.utils.events]:  eta: 10:43:15  iter: 2599  total_loss: 1.55  loss_cls: 0.4825  loss_box_reg: 0.3584  loss_mask: 0.4586  loss_rpn_cls: 0.08764  loss_rpn_loc: 0.08609  time: 0.4311  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:42:36 d2.utils.events]:  eta: 10:42:45  iter: 2619  total_loss: 1.188  loss_cls: 0.3111  loss_box_reg: 0.2402  loss_mask: 0.4703  loss_rpn_cls: 0.0833  loss_rpn_loc: 0.06861  time: 0.4311  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:42:44 d2.utils.events]:  eta: 10:43:22  iter: 2639  total_loss: 1.461  loss_cls: 0.4122  loss_box_reg: 0.3197  loss_mask: 0.4618  loss_rpn_cls: 0.1293  loss_rpn_loc: 0.1361  time: 0.4312  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:42:53 d2.utils.events]:  eta: 10:43:53  iter: 2659  total_loss: 1.4  loss_cls: 0.4287  loss_box_reg: 0.2937  loss_mask: 0.4352  loss_rpn_cls: 0.07871  loss_rpn_loc: 0.0845  time: 0.4313  data_time: 0.0029  lr: 0.0025  max_mem: 2836M
[12/01 17:43:02 d2.utils.events]:  eta: 10:44:00  iter: 2679  total_loss: 1.631  loss_cls: 0.5271  loss_box_reg: 0.3966  loss_mask: 0.444  loss_rpn_cls: 0.1327  loss_rpn_loc: 0.08299  time: 0.4314  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:43:11 d2.utils.events]:  eta: 10:44:12  iter: 2699  total_loss: 1.254  loss_cls: 0.3489  loss_box_reg: 0.3299  loss_mask: 0.4163  loss_rpn_cls: 0.05163  loss_rpn_loc: 0.05693  time: 0.4315  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:43:20 d2.utils.events]:  eta: 10:44:30  iter: 2719  total_loss: 1.542  loss_cls: 0.4852  loss_box_reg: 0.388  loss_mask: 0.4643  loss_rpn_cls: 0.07653  loss_rpn_loc: 0.1096  time: 0.4317  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:43:30 d2.utils.events]:  eta: 10:44:21  iter: 2739  total_loss: 1.635  loss_cls: 0.498  loss_box_reg: 0.3797  loss_mask: 0.4639  loss_rpn_cls: 0.08047  loss_rpn_loc: 0.1121  time: 0.4318  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:43:38 d2.utils.events]:  eta: 10:44:05  iter: 2759  total_loss: 1.212  loss_cls: 0.3334  loss_box_reg: 0.2486  loss_mask: 0.4062  loss_rpn_cls: 0.06134  loss_rpn_loc: 0.07913  time: 0.4319  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:43:47 d2.utils.events]:  eta: 10:44:04  iter: 2779  total_loss: 1.513  loss_cls: 0.4609  loss_box_reg: 0.2812  loss_mask: 0.4566  loss_rpn_cls: 0.102  loss_rpn_loc: 0.09677  time: 0.4320  data_time: 0.0029  lr: 0.0025  max_mem: 2836M
[12/01 17:43:56 d2.utils.events]:  eta: 10:44:04  iter: 2799  total_loss: 1.391  loss_cls: 0.5014  loss_box_reg: 0.3412  loss_mask: 0.4467  loss_rpn_cls: 0.07746  loss_rpn_loc: 0.09043  time: 0.4320  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:44:06 d2.utils.events]:  eta: 10:44:33  iter: 2819  total_loss: 1.572  loss_cls: 0.482  loss_box_reg: 0.3991  loss_mask: 0.4657  loss_rpn_cls: 0.09573  loss_rpn_loc: 0.09324  time: 0.4323  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:44:14 d2.utils.events]:  eta: 10:46:03  iter: 2839  total_loss: 1.337  loss_cls: 0.3692  loss_box_reg: 0.2507  loss_mask: 0.4815  loss_rpn_cls: 0.1061  loss_rpn_loc: 0.07726  time: 0.4324  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:44:24 d2.utils.events]:  eta: 10:46:15  iter: 2859  total_loss: 1.54  loss_cls: 0.4672  loss_box_reg: 0.3878  loss_mask: 0.4374  loss_rpn_cls: 0.0974  loss_rpn_loc: 0.09454  time: 0.4326  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:44:32 d2.utils.events]:  eta: 10:45:50  iter: 2879  total_loss: 1.573  loss_cls: 0.4129  loss_box_reg: 0.4167  loss_mask: 0.4302  loss_rpn_cls: 0.08358  loss_rpn_loc: 0.1179  time: 0.4326  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:44:42 d2.utils.events]:  eta: 10:45:51  iter: 2899  total_loss: 1.394  loss_cls: 0.4519  loss_box_reg: 0.3103  loss_mask: 0.4254  loss_rpn_cls: 0.07289  loss_rpn_loc: 0.1103  time: 0.4328  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:44:51 d2.utils.events]:  eta: 10:46:05  iter: 2919  total_loss: 1.252  loss_cls: 0.4085  loss_box_reg: 0.2955  loss_mask: 0.4049  loss_rpn_cls: 0.06121  loss_rpn_loc: 0.067  time: 0.4329  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:44:59 d2.utils.events]:  eta: 10:45:28  iter: 2939  total_loss: 1.28  loss_cls: 0.3768  loss_box_reg: 0.273  loss_mask: 0.4041  loss_rpn_cls: 0.08832  loss_rpn_loc: 0.09789  time: 0.4329  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:45:08 d2.utils.events]:  eta: 10:45:24  iter: 2959  total_loss: 1.43  loss_cls: 0.4415  loss_box_reg: 0.3562  loss_mask: 0.4521  loss_rpn_cls: 0.06321  loss_rpn_loc: 0.09502  time: 0.4330  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:45:18 d2.utils.events]:  eta: 10:45:46  iter: 2979  total_loss: 1.535  loss_cls: 0.5022  loss_box_reg: 0.3525  loss_mask: 0.4402  loss_rpn_cls: 0.08928  loss_rpn_loc: 0.07818  time: 0.4332  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:45:26 d2.utils.events]:  eta: 10:46:43  iter: 2999  total_loss: 1.278  loss_cls: 0.3682  loss_box_reg: 0.2796  loss_mask: 0.4374  loss_rpn_cls: 0.0734  loss_rpn_loc: 0.08766  time: 0.4333  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:45:35 d2.utils.events]:  eta: 10:47:12  iter: 3019  total_loss: 1.564  loss_cls: 0.3856  loss_box_reg: 0.3141  loss_mask: 0.4532  loss_rpn_cls: 0.1269  loss_rpn_loc: 0.1214  time: 0.4334  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:45:44 d2.utils.events]:  eta: 10:46:56  iter: 3039  total_loss: 1.334  loss_cls: 0.3676  loss_box_reg: 0.3174  loss_mask: 0.4634  loss_rpn_cls: 0.09579  loss_rpn_loc: 0.09945  time: 0.4335  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:45:53 d2.utils.events]:  eta: 10:45:45  iter: 3059  total_loss: 1.366  loss_cls: 0.3388  loss_box_reg: 0.3193  loss_mask: 0.4529  loss_rpn_cls: 0.09986  loss_rpn_loc: 0.107  time: 0.4335  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:46:02 d2.utils.events]:  eta: 10:45:26  iter: 3079  total_loss: 1.24  loss_cls: 0.326  loss_box_reg: 0.2711  loss_mask: 0.3958  loss_rpn_cls: 0.08272  loss_rpn_loc: 0.1037  time: 0.4335  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:46:10 d2.utils.events]:  eta: 10:46:15  iter: 3099  total_loss: 1.373  loss_cls: 0.3916  loss_box_reg: 0.2808  loss_mask: 0.4284  loss_rpn_cls: 0.08394  loss_rpn_loc: 0.06671  time: 0.4335  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:46:19 d2.utils.events]:  eta: 10:45:37  iter: 3119  total_loss: 1.35  loss_cls: 0.3742  loss_box_reg: 0.2954  loss_mask: 0.4491  loss_rpn_cls: 0.07749  loss_rpn_loc: 0.06728  time: 0.4335  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:46:28 d2.utils.events]:  eta: 10:45:01  iter: 3139  total_loss: 1.54  loss_cls: 0.564  loss_box_reg: 0.3452  loss_mask: 0.455  loss_rpn_cls: 0.07356  loss_rpn_loc: 0.09708  time: 0.4335  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:46:37 d2.utils.events]:  eta: 10:46:55  iter: 3159  total_loss: 1.654  loss_cls: 0.5058  loss_box_reg: 0.401  loss_mask: 0.4682  loss_rpn_cls: 0.08215  loss_rpn_loc: 0.09076  time: 0.4338  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:46:47 d2.utils.events]:  eta: 10:46:46  iter: 3179  total_loss: 1.46  loss_cls: 0.4257  loss_box_reg: 0.3624  loss_mask: 0.4117  loss_rpn_cls: 0.102  loss_rpn_loc: 0.08729  time: 0.4340  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:46:55 d2.utils.events]:  eta: 10:46:04  iter: 3199  total_loss: 1.48  loss_cls: 0.4063  loss_box_reg: 0.3253  loss_mask: 0.425  loss_rpn_cls: 0.1183  loss_rpn_loc: 0.1596  time: 0.4340  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:47:05 d2.utils.events]:  eta: 10:46:06  iter: 3219  total_loss: 1.56  loss_cls: 0.4901  loss_box_reg: 0.3693  loss_mask: 0.4334  loss_rpn_cls: 0.06455  loss_rpn_loc: 0.06383  time: 0.4342  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:47:14 d2.utils.events]:  eta: 10:45:46  iter: 3239  total_loss: 1.522  loss_cls: 0.4371  loss_box_reg: 0.4045  loss_mask: 0.4943  loss_rpn_cls: 0.06899  loss_rpn_loc: 0.07644  time: 0.4342  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:47:23 d2.utils.events]:  eta: 10:46:10  iter: 3259  total_loss: 1.511  loss_cls: 0.47  loss_box_reg: 0.3273  loss_mask: 0.4381  loss_rpn_cls: 0.08839  loss_rpn_loc: 0.1143  time: 0.4343  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:47:31 d2.utils.events]:  eta: 10:46:10  iter: 3279  total_loss: 1.067  loss_cls: 0.3061  loss_box_reg: 0.2046  loss_mask: 0.3777  loss_rpn_cls: 0.08124  loss_rpn_loc: 0.05913  time: 0.4344  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:47:40 d2.utils.events]:  eta: 10:45:30  iter: 3299  total_loss: 1.245  loss_cls: 0.3443  loss_box_reg: 0.2469  loss_mask: 0.459  loss_rpn_cls: 0.08327  loss_rpn_loc: 0.08062  time: 0.4344  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:47:49 d2.utils.events]:  eta: 10:45:44  iter: 3319  total_loss: 1.55  loss_cls: 0.4509  loss_box_reg: 0.3518  loss_mask: 0.4591  loss_rpn_cls: 0.09248  loss_rpn_loc: 0.1088  time: 0.4345  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:47:58 d2.utils.events]:  eta: 10:46:03  iter: 3339  total_loss: 1.29  loss_cls: 0.3684  loss_box_reg: 0.2825  loss_mask: 0.4478  loss_rpn_cls: 0.0977  loss_rpn_loc: 0.08023  time: 0.4346  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:48:07 d2.utils.events]:  eta: 10:46:01  iter: 3359  total_loss: 1.519  loss_cls: 0.4637  loss_box_reg: 0.3378  loss_mask: 0.4319  loss_rpn_cls: 0.0822  loss_rpn_loc: 0.1026  time: 0.4346  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:48:17 d2.utils.events]:  eta: 10:45:56  iter: 3379  total_loss: 1.387  loss_cls: 0.443  loss_box_reg: 0.2892  loss_mask: 0.4035  loss_rpn_cls: 0.08403  loss_rpn_loc: 0.1061  time: 0.4349  data_time: 0.0029  lr: 0.0025  max_mem: 2836M
[12/01 17:48:26 d2.utils.events]:  eta: 10:45:53  iter: 3399  total_loss: 1.464  loss_cls: 0.5349  loss_box_reg: 0.435  loss_mask: 0.4411  loss_rpn_cls: 0.08576  loss_rpn_loc: 0.07411  time: 0.4350  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:48:35 d2.utils.events]:  eta: 10:46:42  iter: 3419  total_loss: 1.239  loss_cls: 0.3948  loss_box_reg: 0.267  loss_mask: 0.4673  loss_rpn_cls: 0.07157  loss_rpn_loc: 0.08121  time: 0.4352  data_time: 0.0029  lr: 0.0025  max_mem: 2836M
[12/01 17:48:44 d2.utils.events]:  eta: 10:46:46  iter: 3439  total_loss: 1.371  loss_cls: 0.4207  loss_box_reg: 0.2713  loss_mask: 0.4573  loss_rpn_cls: 0.1132  loss_rpn_loc: 0.07879  time: 0.4352  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:48:53 d2.utils.events]:  eta: 10:46:37  iter: 3459  total_loss: 1.368  loss_cls: 0.4011  loss_box_reg: 0.32  loss_mask: 0.4426  loss_rpn_cls: 0.09732  loss_rpn_loc: 0.07823  time: 0.4352  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:49:01 d2.utils.events]:  eta: 10:46:15  iter: 3479  total_loss: 1.197  loss_cls: 0.3701  loss_box_reg: 0.2818  loss_mask: 0.3817  loss_rpn_cls: 0.05673  loss_rpn_loc: 0.05085  time: 0.4352  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:49:10 d2.utils.events]:  eta: 10:45:27  iter: 3499  total_loss: 1.186  loss_cls: 0.3762  loss_box_reg: 0.2832  loss_mask: 0.4091  loss_rpn_cls: 0.06346  loss_rpn_loc: 0.03898  time: 0.4353  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:49:19 d2.utils.events]:  eta: 10:44:49  iter: 3519  total_loss: 1.469  loss_cls: 0.4742  loss_box_reg: 0.3769  loss_mask: 0.4274  loss_rpn_cls: 0.08984  loss_rpn_loc: 0.09419  time: 0.4352  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:49:28 d2.utils.events]:  eta: 10:44:57  iter: 3539  total_loss: 1.317  loss_cls: 0.3437  loss_box_reg: 0.2906  loss_mask: 0.4283  loss_rpn_cls: 0.1047  loss_rpn_loc: 0.1455  time: 0.4353  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:49:38 d2.utils.events]:  eta: 10:47:00  iter: 3559  total_loss: 1.496  loss_cls: 0.4556  loss_box_reg: 0.3796  loss_mask: 0.4556  loss_rpn_cls: 0.1  loss_rpn_loc: 0.1014  time: 0.4356  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:49:48 d2.utils.events]:  eta: 10:47:05  iter: 3579  total_loss: 1.497  loss_cls: 0.4335  loss_box_reg: 0.3706  loss_mask: 0.4238  loss_rpn_cls: 0.06705  loss_rpn_loc: 0.06581  time: 0.4360  data_time: 0.0605  lr: 0.0025  max_mem: 2836M
[12/01 17:49:59 d2.utils.events]:  eta: 10:45:34  iter: 3599  total_loss: 1.058  loss_cls: 0.308  loss_box_reg: 0.2248  loss_mask: 0.3977  loss_rpn_cls: 0.05313  loss_rpn_loc: 0.05186  time: 0.4360  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:50:08 d2.utils.events]:  eta: 10:44:56  iter: 3619  total_loss: 1.38  loss_cls: 0.3803  loss_box_reg: 0.2989  loss_mask: 0.3962  loss_rpn_cls: 0.08693  loss_rpn_loc: 0.1007  time: 0.4360  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:50:17 d2.utils.events]:  eta: 10:44:35  iter: 3639  total_loss: 1.285  loss_cls: 0.355  loss_box_reg: 0.2524  loss_mask: 0.4299  loss_rpn_cls: 0.06162  loss_rpn_loc: 0.05244  time: 0.4360  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:50:25 d2.utils.events]:  eta: 10:43:51  iter: 3659  total_loss: 1.265  loss_cls: 0.3442  loss_box_reg: 0.2815  loss_mask: 0.4276  loss_rpn_cls: 0.08623  loss_rpn_loc: 0.06559  time: 0.4360  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:50:34 d2.utils.events]:  eta: 10:43:48  iter: 3679  total_loss: 1.395  loss_cls: 0.39  loss_box_reg: 0.3161  loss_mask: 0.4234  loss_rpn_cls: 0.1032  loss_rpn_loc: 0.09513  time: 0.4360  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:50:43 d2.utils.events]:  eta: 10:43:57  iter: 3699  total_loss: 1.342  loss_cls: 0.3746  loss_box_reg: 0.2983  loss_mask: 0.4411  loss_rpn_cls: 0.0782  loss_rpn_loc: 0.06702  time: 0.4361  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:50:52 d2.utils.events]:  eta: 10:43:30  iter: 3719  total_loss: 1.344  loss_cls: 0.4167  loss_box_reg: 0.2602  loss_mask: 0.4445  loss_rpn_cls: 0.1004  loss_rpn_loc: 0.09737  time: 0.4363  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:51:02 d2.utils.events]:  eta: 10:44:02  iter: 3739  total_loss: 1.464  loss_cls: 0.4762  loss_box_reg: 0.3138  loss_mask: 0.4067  loss_rpn_cls: 0.1321  loss_rpn_loc: 0.1282  time: 0.4364  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:51:11 d2.utils.events]:  eta: 10:44:59  iter: 3759  total_loss: 1.322  loss_cls: 0.3832  loss_box_reg: 0.3149  loss_mask: 0.4474  loss_rpn_cls: 0.1077  loss_rpn_loc: 0.0925  time: 0.4365  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:51:20 d2.utils.events]:  eta: 10:45:53  iter: 3779  total_loss: 1.06  loss_cls: 0.3097  loss_box_reg: 0.2518  loss_mask: 0.3837  loss_rpn_cls: 0.05977  loss_rpn_loc: 0.04916  time: 0.4367  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:51:30 d2.utils.events]:  eta: 10:46:38  iter: 3799  total_loss: 1.373  loss_cls: 0.4061  loss_box_reg: 0.3468  loss_mask: 0.4446  loss_rpn_cls: 0.119  loss_rpn_loc: 0.1068  time: 0.4369  data_time: 0.0032  lr: 0.0025  max_mem: 2836M
[12/01 17:51:39 d2.utils.events]:  eta: 10:46:16  iter: 3819  total_loss: 1.319  loss_cls: 0.4306  loss_box_reg: 0.318  loss_mask: 0.3964  loss_rpn_cls: 0.08686  loss_rpn_loc: 0.06479  time: 0.4370  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:51:49 d2.utils.events]:  eta: 10:47:00  iter: 3839  total_loss: 1.604  loss_cls: 0.523  loss_box_reg: 0.3681  loss_mask: 0.4354  loss_rpn_cls: 0.08104  loss_rpn_loc: 0.1101  time: 0.4372  data_time: 0.0025  lr: 0.0025  max_mem: 2836M
[12/01 17:51:58 d2.utils.events]:  eta: 10:47:01  iter: 3859  total_loss: 1.547  loss_cls: 0.4386  loss_box_reg: 0.3786  loss_mask: 0.446  loss_rpn_cls: 0.1166  loss_rpn_loc: 0.1107  time: 0.4375  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:52:08 d2.utils.events]:  eta: 10:47:43  iter: 3879  total_loss: 1.334  loss_cls: 0.3748  loss_box_reg: 0.3165  loss_mask: 0.4246  loss_rpn_cls: 0.09221  loss_rpn_loc: 0.06836  time: 0.4377  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:52:17 d2.utils.events]:  eta: 10:48:13  iter: 3899  total_loss: 1.334  loss_cls: 0.4124  loss_box_reg: 0.3002  loss_mask: 0.443  loss_rpn_cls: 0.1192  loss_rpn_loc: 0.1069  time: 0.4379  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:52:26 d2.utils.events]:  eta: 10:48:52  iter: 3919  total_loss: 1.337  loss_cls: 0.3726  loss_box_reg: 0.3328  loss_mask: 0.4318  loss_rpn_cls: 0.09278  loss_rpn_loc: 0.06193  time: 0.4379  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:52:36 d2.utils.events]:  eta: 10:49:45  iter: 3939  total_loss: 1.46  loss_cls: 0.3965  loss_box_reg: 0.3583  loss_mask: 0.4557  loss_rpn_cls: 0.08003  loss_rpn_loc: 0.1155  time: 0.4381  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:52:45 d2.utils.events]:  eta: 10:49:36  iter: 3959  total_loss: 1.363  loss_cls: 0.3521  loss_box_reg: 0.2669  loss_mask: 0.4007  loss_rpn_cls: 0.0928  loss_rpn_loc: 0.1183  time: 0.4382  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:52:54 d2.utils.events]:  eta: 10:49:34  iter: 3979  total_loss: 1.454  loss_cls: 0.3911  loss_box_reg: 0.3762  loss_mask: 0.4424  loss_rpn_cls: 0.09853  loss_rpn_loc: 0.09696  time: 0.4383  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:53:03 d2.utils.events]:  eta: 10:49:35  iter: 3999  total_loss: 1.519  loss_cls: 0.3869  loss_box_reg: 0.3664  loss_mask: 0.4064  loss_rpn_cls: 0.06787  loss_rpn_loc: 0.08164  time: 0.4384  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:53:13 d2.utils.events]:  eta: 10:49:09  iter: 4019  total_loss: 1.464  loss_cls: 0.4461  loss_box_reg: 0.3854  loss_mask: 0.4399  loss_rpn_cls: 0.0951  loss_rpn_loc: 0.1321  time: 0.4386  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:53:22 d2.utils.events]:  eta: 10:49:17  iter: 4039  total_loss: 1.247  loss_cls: 0.3856  loss_box_reg: 0.2716  loss_mask: 0.4249  loss_rpn_cls: 0.06087  loss_rpn_loc: 0.05838  time: 0.4386  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:53:31 d2.utils.events]:  eta: 10:49:28  iter: 4059  total_loss: 1.295  loss_cls: 0.394  loss_box_reg: 0.3002  loss_mask: 0.4155  loss_rpn_cls: 0.06601  loss_rpn_loc: 0.06778  time: 0.4387  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:53:40 d2.utils.events]:  eta: 10:50:27  iter: 4079  total_loss: 1.286  loss_cls: 0.4031  loss_box_reg: 0.2966  loss_mask: 0.4096  loss_rpn_cls: 0.0745  loss_rpn_loc: 0.07898  time: 0.4389  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:53:49 d2.utils.events]:  eta: 10:50:40  iter: 4099  total_loss: 1.464  loss_cls: 0.3921  loss_box_reg: 0.2868  loss_mask: 0.4449  loss_rpn_cls: 0.0829  loss_rpn_loc: 0.08337  time: 0.4389  data_time: 0.0025  lr: 0.0025  max_mem: 2836M
[12/01 17:53:58 d2.utils.events]:  eta: 10:50:59  iter: 4119  total_loss: 1.503  loss_cls: 0.3849  loss_box_reg: 0.3631  loss_mask: 0.4237  loss_rpn_cls: 0.08877  loss_rpn_loc: 0.1083  time: 0.4389  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:54:07 d2.utils.events]:  eta: 10:50:51  iter: 4139  total_loss: 1.096  loss_cls: 0.3165  loss_box_reg: 0.2003  loss_mask: 0.4008  loss_rpn_cls: 0.07234  loss_rpn_loc: 0.08117  time: 0.4389  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:54:16 d2.utils.events]:  eta: 10:49:18  iter: 4159  total_loss: 1.222  loss_cls: 0.3014  loss_box_reg: 0.2669  loss_mask: 0.4063  loss_rpn_cls: 0.0651  loss_rpn_loc: 0.05281  time: 0.4390  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:54:25 d2.utils.events]:  eta: 10:49:29  iter: 4179  total_loss: 1.487  loss_cls: 0.433  loss_box_reg: 0.3672  loss_mask: 0.4119  loss_rpn_cls: 0.06079  loss_rpn_loc: 0.04702  time: 0.4392  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:54:35 d2.utils.events]:  eta: 10:50:48  iter: 4199  total_loss: 1.648  loss_cls: 0.4798  loss_box_reg: 0.3958  loss_mask: 0.4657  loss_rpn_cls: 0.08219  loss_rpn_loc: 0.09392  time: 0.4393  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:54:44 d2.utils.events]:  eta: 10:51:11  iter: 4219  total_loss: 1.283  loss_cls: 0.3741  loss_box_reg: 0.2512  loss_mask: 0.4009  loss_rpn_cls: 0.08904  loss_rpn_loc: 0.07794  time: 0.4394  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:54:54 d2.utils.events]:  eta: 10:52:12  iter: 4239  total_loss: 1.357  loss_cls: 0.3746  loss_box_reg: 0.3367  loss_mask: 0.4275  loss_rpn_cls: 0.09808  loss_rpn_loc: 0.1117  time: 0.4396  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:55:03 d2.utils.events]:  eta: 10:51:56  iter: 4259  total_loss: 1.144  loss_cls: 0.2874  loss_box_reg: 0.2281  loss_mask: 0.3898  loss_rpn_cls: 0.08701  loss_rpn_loc: 0.04501  time: 0.4397  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:55:12 d2.utils.events]:  eta: 10:52:31  iter: 4279  total_loss: 1.328  loss_cls: 0.3872  loss_box_reg: 0.356  loss_mask: 0.4039  loss_rpn_cls: 0.06945  loss_rpn_loc: 0.0701  time: 0.4398  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:55:22 d2.utils.events]:  eta: 10:52:33  iter: 4299  total_loss: 1.257  loss_cls: 0.3422  loss_box_reg: 0.2885  loss_mask: 0.4104  loss_rpn_cls: 0.06116  loss_rpn_loc: 0.06414  time: 0.4400  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:55:31 d2.utils.events]:  eta: 10:52:45  iter: 4319  total_loss: 1.409  loss_cls: 0.456  loss_box_reg: 0.355  loss_mask: 0.4253  loss_rpn_cls: 0.05966  loss_rpn_loc: 0.06804  time: 0.4401  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:55:40 d2.utils.events]:  eta: 10:53:21  iter: 4339  total_loss: 1.348  loss_cls: 0.4589  loss_box_reg: 0.3409  loss_mask: 0.4149  loss_rpn_cls: 0.06744  loss_rpn_loc: 0.07473  time: 0.4402  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:55:49 d2.utils.events]:  eta: 10:52:55  iter: 4359  total_loss: 1.401  loss_cls: 0.3519  loss_box_reg: 0.276  loss_mask: 0.4336  loss_rpn_cls: 0.09673  loss_rpn_loc: 0.09395  time: 0.4402  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:55:58 d2.utils.events]:  eta: 10:52:56  iter: 4379  total_loss: 1.243  loss_cls: 0.347  loss_box_reg: 0.2667  loss_mask: 0.4314  loss_rpn_cls: 0.1015  loss_rpn_loc: 0.08721  time: 0.4403  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:56:08 d2.utils.events]:  eta: 10:54:06  iter: 4399  total_loss: 1.338  loss_cls: 0.3826  loss_box_reg: 0.2694  loss_mask: 0.4469  loss_rpn_cls: 0.09189  loss_rpn_loc: 0.1315  time: 0.4405  data_time: 0.0029  lr: 0.0025  max_mem: 2836M
[12/01 17:56:17 d2.utils.events]:  eta: 10:54:06  iter: 4419  total_loss: 1.346  loss_cls: 0.3372  loss_box_reg: 0.2788  loss_mask: 0.4066  loss_rpn_cls: 0.09805  loss_rpn_loc: 0.09772  time: 0.4406  data_time: 0.0025  lr: 0.0025  max_mem: 2836M
[12/01 17:56:26 d2.utils.events]:  eta: 10:54:21  iter: 4439  total_loss: 1.443  loss_cls: 0.32  loss_box_reg: 0.3412  loss_mask: 0.4376  loss_rpn_cls: 0.07701  loss_rpn_loc: 0.0932  time: 0.4407  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:56:36 d2.utils.events]:  eta: 10:55:20  iter: 4459  total_loss: 1.575  loss_cls: 0.4366  loss_box_reg: 0.4264  loss_mask: 0.4321  loss_rpn_cls: 0.09143  loss_rpn_loc: 0.1232  time: 0.4409  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:56:45 d2.utils.events]:  eta: 10:55:26  iter: 4479  total_loss: 1.415  loss_cls: 0.3719  loss_box_reg: 0.3112  loss_mask: 0.4311  loss_rpn_cls: 0.07713  loss_rpn_loc: 0.1193  time: 0.4409  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:56:54 d2.utils.events]:  eta: 10:56:13  iter: 4499  total_loss: 1.208  loss_cls: 0.3058  loss_box_reg: 0.251  loss_mask: 0.4014  loss_rpn_cls: 0.09168  loss_rpn_loc: 0.08342  time: 0.4409  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:57:03 d2.utils.events]:  eta: 10:56:27  iter: 4519  total_loss: 1.448  loss_cls: 0.4807  loss_box_reg: 0.3151  loss_mask: 0.3931  loss_rpn_cls: 0.07652  loss_rpn_loc: 0.08111  time: 0.4411  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:57:13 d2.utils.events]:  eta: 10:57:05  iter: 4539  total_loss: 1.376  loss_cls: 0.3906  loss_box_reg: 0.2812  loss_mask: 0.4043  loss_rpn_cls: 0.08404  loss_rpn_loc: 0.07126  time: 0.4411  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:57:22 d2.utils.events]:  eta: 10:56:29  iter: 4559  total_loss: 1.298  loss_cls: 0.4178  loss_box_reg: 0.2957  loss_mask: 0.3989  loss_rpn_cls: 0.06457  loss_rpn_loc: 0.05392  time: 0.4413  data_time: 0.0029  lr: 0.0025  max_mem: 2836M
[12/01 17:57:31 d2.utils.events]:  eta: 10:55:57  iter: 4579  total_loss: 1.179  loss_cls: 0.2893  loss_box_reg: 0.248  loss_mask: 0.4094  loss_rpn_cls: 0.06645  loss_rpn_loc: 0.06705  time: 0.4414  data_time: 0.0029  lr: 0.0025  max_mem: 2836M
[12/01 17:57:41 d2.utils.events]:  eta: 10:56:37  iter: 4599  total_loss: 1.386  loss_cls: 0.4015  loss_box_reg: 0.3468  loss_mask: 0.4113  loss_rpn_cls: 0.114  loss_rpn_loc: 0.1424  time: 0.4415  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:57:50 d2.utils.events]:  eta: 10:58:15  iter: 4619  total_loss: 1.36  loss_cls: 0.3713  loss_box_reg: 0.3348  loss_mask: 0.4326  loss_rpn_cls: 0.1057  loss_rpn_loc: 0.09719  time: 0.4416  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:57:59 d2.utils.events]:  eta: 10:58:37  iter: 4639  total_loss: 1.203  loss_cls: 0.3584  loss_box_reg: 0.2385  loss_mask: 0.4269  loss_rpn_cls: 0.06362  loss_rpn_loc: 0.1123  time: 0.4417  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:58:09 d2.utils.events]:  eta: 10:59:04  iter: 4659  total_loss: 1.363  loss_cls: 0.3802  loss_box_reg: 0.2996  loss_mask: 0.438  loss_rpn_cls: 0.07451  loss_rpn_loc: 0.07463  time: 0.4418  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:58:18 d2.utils.events]:  eta: 11:00:43  iter: 4679  total_loss: 1.289  loss_cls: 0.3961  loss_box_reg: 0.2995  loss_mask: 0.4336  loss_rpn_cls: 0.07384  loss_rpn_loc: 0.09943  time: 0.4419  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:58:27 d2.utils.events]:  eta: 10:59:29  iter: 4699  total_loss: 1.404  loss_cls: 0.344  loss_box_reg: 0.2811  loss_mask: 0.403  loss_rpn_cls: 0.07126  loss_rpn_loc: 0.05574  time: 0.4420  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:58:36 d2.utils.events]:  eta: 10:59:20  iter: 4719  total_loss: 1.232  loss_cls: 0.3459  loss_box_reg: 0.2446  loss_mask: 0.3805  loss_rpn_cls: 0.1066  loss_rpn_loc: 0.09521  time: 0.4421  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:58:46 d2.utils.events]:  eta: 10:58:35  iter: 4739  total_loss: 1.427  loss_cls: 0.3245  loss_box_reg: 0.2747  loss_mask: 0.4249  loss_rpn_cls: 0.101  loss_rpn_loc: 0.125  time: 0.4422  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
[12/01 17:58:55 d2.utils.events]:  eta: 10:58:17  iter: 4759  total_loss: 1.378  loss_cls: 0.4137  loss_box_reg: 0.2863  loss_mask: 0.4376  loss_rpn_cls: 0.1077  loss_rpn_loc: 0.111  time: 0.4422  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:59:04 d2.utils.events]:  eta: 10:58:06  iter: 4779  total_loss: 1.174  loss_cls: 0.3293  loss_box_reg: 0.275  loss_mask: 0.3636  loss_rpn_cls: 0.0664  loss_rpn_loc: 0.07688  time: 0.4423  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:59:13 d2.utils.events]:  eta: 10:57:57  iter: 4799  total_loss: 1.441  loss_cls: 0.4289  loss_box_reg: 0.3311  loss_mask: 0.4251  loss_rpn_cls: 0.1063  loss_rpn_loc: 0.1159  time: 0.4424  data_time: 0.0028  lr: 0.0025  max_mem: 2836M
[12/01 17:59:23 d2.utils.events]:  eta: 10:57:58  iter: 4819  total_loss: 1.176  loss_cls: 0.3455  loss_box_reg: 0.263  loss_mask: 0.3919  loss_rpn_cls: 0.05607  loss_rpn_loc: 0.05225  time: 0.4424  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
[12/01 17:59:32 d2.utils.events]:  eta: 10:57:05  iter: 4839  total_loss: 1.406  loss_cls: 0.4122  loss_box_reg: 0.3181  loss_mask: 0.3993  loss_rpn_cls: 0.07949  loss_rpn_loc: 0.1006  time: 0.4425  data_time: 0.0026  lr: 0.0025  max_mem: 2836M
^C[12/01 17:59:39 d2.engine.hooks]: Overall training speed: 4854 iterations in 0:35:48 (0.4427 s / it)
[12/01 17:59:39 d2.engine.hooks]: Total training time: 0:35:53 (0:00:04 on hooks)
[12/01 17:59:39 d2.utils.events]:  eta: 10:56:52  iter: 4856  total_loss: 1.245  loss_cls: 0.3731  loss_box_reg: 0.3037  loss_mask: 0.3624  loss_rpn_cls: 0.05399  loss_rpn_loc: 0.05746  time: 0.4426  data_time: 0.0027  lr: 0.0025  max_mem: 2836M
Traceback (most recent call last):
  File "tools/train_net.py", line 162, in <module>
    args=(args,),
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/launch.py", line 82, in launch
    main_func(*args)
  File "tools/train_net.py", line 150, in main
    return trainer.train()
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/defaults.py", line 484, in train
    super().train(self.start_iter, self.max_iter)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/modeling/meta_arch/rcnn.py", line 161, in forward
    proposals, proposal_losses = self.proposal_generator(images, features, gt_instances)
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/modeling/proposal_generator/rpn.py", line 452, in forward
    anchors = self.anchor_generator(features)
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/modeling/anchor_generator.py", line 230, in forward
    anchors_over_all_feature_maps = self._grid_anchors(grid_sizes)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/modeling/anchor_generator.py", line 174, in _grid_anchors
    shift_x, shift_y = _create_grid_offsets(size, stride, self.offset, base_anchors)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/modeling/anchor_generator.py", line 45, in _create_grid_offsets
    target_device_tensor,
  File "/home/minoru/miniconda3/envs/STALE/lib/python3.7/site-packages/torch/jit/_trace.py", line 1118, in wrapper
    return fn(*args, **kwargs)
  File "/home/minoru/PycharmProjects/STALE/detectron2/detectron2/layers/wrappers.py", line 148, in move_device_like
    return src.to(dst.device)
KeyboardInterrupt
(STALE) minoru@B450M-A:~/PycharmProjects/STALE/detectron2$ 


